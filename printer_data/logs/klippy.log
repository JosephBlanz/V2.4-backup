Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-98-g5e433fff-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Fri Jan 26 22:42:22 2024 (1706308942.8 1358.5)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 548262882944: New connection
webhooks client 548262882944: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(3445): Fri Jan 26 22:28:46 2024
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_STM32_CLOCK_REF_8M=y
# CONFIG_STM32_CLOCK_REF_12M is not set
# CONFIG_STM32_CLOCK_REF_16M is not set
# CONFIG_STM32_CLOCK_REF_20M is not set
# CONFIG_STM32_CLOCK_REF_24M is not set
# CONFIG_STM32_CLOCK_REF_25M is not set
# CONFIG_STM32_CLOCK_REF_INTERNAL is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_SERIAL_USART1_ALT_PB7_PB6 is not set
# CONFIG_STM32_SERIAL_USART2 is not set
# CONFIG_STM32_SERIAL_USART2_ALT_PD6_PD5 is not set
# CONFIG_STM32_SERIAL_USART3 is not set
# CONFIG_STM32_SERIAL_USART3_ALT_PD9_PD8 is not set
# CONFIG_STM32_SERIAL_USART5 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB8_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB12_PB13 is not set
# CONFIG_STM32_MMENU_CANBUS_PD0_PD1 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"

#
# USB ids
#
# end of USB ids

CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7720): Fri Jan 26 22:29:04 2024
Last MCU build version: v0.12.0-98-g5e433fff
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Fri Jan 26 22:29:11 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-98-g5e433fff-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Fri Jan 26 22:45:09 2024 (1706309109.8 19.1)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 548425231184: New connection
webhooks client 548425231184: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(3445): Fri Jan 26 22:28:46 2024
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_STM32_CLOCK_REF_8M=y
# CONFIG_STM32_CLOCK_REF_12M is not set
# CONFIG_STM32_CLOCK_REF_16M is not set
# CONFIG_STM32_CLOCK_REF_20M is not set
# CONFIG_STM32_CLOCK_REF_24M is not set
# CONFIG_STM32_CLOCK_REF_25M is not set
# CONFIG_STM32_CLOCK_REF_INTERNAL is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_SERIAL_USART1_ALT_PB7_PB6 is not set
# CONFIG_STM32_SERIAL_USART2 is not set
# CONFIG_STM32_SERIAL_USART2_ALT_PD6_PD5 is not set
# CONFIG_STM32_SERIAL_USART3 is not set
# CONFIG_STM32_SERIAL_USART3_ALT_PD9_PD8 is not set
# CONFIG_STM32_SERIAL_USART5 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB8_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB12_PB13 is not set
# CONFIG_STM32_MMENU_CANBUS_PD0_PD1 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"

#
# USB ids
#
# end of USB ids

CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7720): Fri Jan 26 22:29:04 2024
Last MCU build version: v0.12.0-98-g5e433fff
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Fri Jan 26 22:29:11 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-98-g5e433fff-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Fri Jan 26 22:50:22 2024 (1706309422.0 18.3)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 547902332304: New connection
webhooks client 547902332304: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'SB2240'
webhooks client 547902332304: Disconnected
Restarting printer
Start printer at Fri Jan 26 22:50:56 2024 (1706309456.5 37.4)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 547911544496: New connection
webhooks client 547911544496: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'SB2240'
webhooks client 547911544496: Disconnected
Restarting printer
Start printer at Fri Jan 26 22:51:16 2024 (1706309476.1 56.9)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 547901923440: New connection
webhooks client 547901923440: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-98-g5e433fff-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Fri Jan 26 22:52:51 2024 (1706309571.6 19.8)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 548558790032: New connection
webhooks client 548558790032: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'SB2240'
webhooks client 548558790032: Disconnected
Restarting printer
Start printer at Fri Jan 26 22:56:40 2024 (1706309800.5 53.4)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 548567805856: New connection
webhooks client 548567805856: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-98-g5e433fff-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Fri Jan 26 22:57:36 2024 (1706309856.4 109.4)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 548142005888: New connection
webhooks client 548142005888: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'SB2240'
webhooks client 548142005888: Disconnected
Restarting printer
Start printer at Fri Jan 26 22:57:45 2024 (1706309866.0 118.9)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 548141484400: New connection
webhooks client 548141484400: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'SB2240'
webhooks client 548141484400: Disconnected
Restarting printer
Start printer at Fri Jan 26 22:59:03 2024 (1706309943.7 196.6)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 548218278240: New connection
webhooks client 548218278240: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(892): Fri Jan 26 22:57:03 2024
========= Last MCU build config =========
# CONFIG_LOW_LEVEL_OPTIONS is not set
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
CONFIG_MACH_LINUX=y
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="linux"
CONFIG_CLOCK_FREQ=50000000
CONFIG_LINUX_SELECT=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(9189): Fri Jan 26 22:57:23 2024
Last MCU build version: v0.12.0-98-g5e433fff
Last MCU build tools: gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2
Last MCU build config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
Build file /home/pi/klipper/klippy/../out/klipper.elf(868088): Fri Jan 26 22:57:32 2024
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-98-g5e433fff-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Fri Jan 26 23:01:41 2024 (1706310101.5 354.5)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 548579015168: New connection
webhooks client 548579015168: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 768, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 773, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(3445): Fri Jan 26 23:01:59 2024
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_HC32F460 is not set
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_AR100 is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32g0b1xx"
CONFIG_CLOCK_FREQ=64000000
CONFIG_USBSERIAL=y
CONFIG_FLASH_SIZE=0x20000
CONFIG_FLASH_BOOT_ADDRESS=0x8000000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x24000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x8002000
CONFIG_STM32_SELECT=y
# CONFIG_MACH_STM32F103 is not set
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F765 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G070 is not set
# CONFIG_MACH_STM32G071 is not set
# CONFIG_MACH_STM32G0B0 is not set
CONFIG_MACH_STM32G0B1=y
# CONFIG_MACH_STM32G431 is not set
# CONFIG_MACH_STM32H723 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_N32G452 is not set
# CONFIG_MACH_N32G455 is not set
CONFIG_MACH_STM32G0=y
CONFIG_MACH_STM32G0Bx=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_FDCANBUS=y
CONFIG_HAVE_STM32_USBCANBUS=y
CONFIG_STM32_DFU_ROM_ADDRESS=0x1fff0000
CONFIG_STM32_FLASH_START_2000=y
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_STM32_CLOCK_REF_8M=y
# CONFIG_STM32_CLOCK_REF_12M is not set
# CONFIG_STM32_CLOCK_REF_16M is not set
# CONFIG_STM32_CLOCK_REF_20M is not set
# CONFIG_STM32_CLOCK_REF_24M is not set
# CONFIG_STM32_CLOCK_REF_25M is not set
# CONFIG_STM32_CLOCK_REF_INTERNAL is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
CONFIG_STM32_USB_PA11_PA12=y
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_SERIAL_USART1_ALT_PB7_PB6 is not set
# CONFIG_STM32_SERIAL_USART2 is not set
# CONFIG_STM32_SERIAL_USART2_ALT_PD6_PD5 is not set
# CONFIG_STM32_SERIAL_USART3 is not set
# CONFIG_STM32_SERIAL_USART3_ALT_PD9_PD8 is not set
# CONFIG_STM32_SERIAL_USART5 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
# CONFIG_STM32_CANBUS_PA11_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB8_PB9 is not set
# CONFIG_STM32_MMENU_CANBUS_PB12_PB13 is not set
# CONFIG_STM32_MMENU_CANBUS_PD0_PD1 is not set
# CONFIG_STM32_MMENU_CANBUS_PB0_PB1 is not set
# CONFIG_STM32_MMENU_CANBUS_PD12_PD13 is not set
# CONFIG_STM32_MMENU_CANBUS_PC2_PC3 is not set
# CONFIG_STM32_USBCANBUS_PA11_PA12 is not set
CONFIG_USB=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER_CHIPID=y
CONFIG_USB_SERIAL_NUMBER="12345"

#
# USB ids
#
# end of USB ids

CONFIG_WANT_GPIO_BITBANGING=y
CONFIG_WANT_DISPLAYS=y
CONFIG_WANT_SENSORS=y
CONFIG_WANT_LIS2DW=y
CONFIG_WANT_SOFTWARE_I2C=y
CONFIG_WANT_SOFTWARE_SPI=y
CONFIG_NEED_SENSOR_BULK=y
CONFIG_CANBUS_FREQUENCY=1000000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_HAVE_BOOTLOADER_REQUEST=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7720): Fri Jan 26 23:02:23 2024
Last MCU build version: v0.12.0-98-g5e433fff
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1057236): Fri Jan 26 23:02:30 2024
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'SB2240'
webhooks client 548579015168: Disconnected
Restarting printer
Start printer at Fri Jan 26 23:03:54 2024 (1706310234.1 487.0)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 548587794688: New connection
webhooks client 548587794688: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'SB2240'
webhooks client 548587794688: Disconnected
Restarting printer
Start printer at Fri Jan 26 23:03:59 2024 (1706310239.3 492.2)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 548577853296: New connection
webhooks client 548577853296: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
Unable to issue reset command on MCU 'mcu'
Unable to issue reset command on MCU 'SB2240'
webhooks client 548577853296: Disconnected
Restarting printer
Start printer at Fri Jan 26 23:04:10 2024 (1706310250.6 503.6)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
webhooks client 548588189200: New connection
webhooks client 548588189200: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00'
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-98-g5e433fff-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Fri Jan 26 23:05:46 2024 (1706310346.7 599.7)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 548562968192: New connection
webhooks client 548562968192: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
Loaded MCU 'mcu' 106 commands (v0.12.0-98-g5e433fff / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'SB2240': Starting CAN connect
Created a socket
Loaded MCU 'SB2240' 108 commands (v0.12.0-98-g5e433fff / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'SB2240' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-270.578035 slope=1301.878613
mcu_temperature 'SB2240' nominal base=-268.567335 slope=1290.687679
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'SB2240' printer configuration...
Configured MCU 'SB2240' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (40.0, 40.0)    | (40.0, 40.0)
  1   | (107.5, 40.0)   | (107.5, 40.0)
  2   | (175.0, 40.0)   | (175.0, 40.0)
  3   | (242.5, 40.0)   | (242.5, 40.0)
  4   | (310.0, 40.0)   | (310.0, 40.0)
  5   | (310.0, 107.5)  | (310.0, 107.5)
  6   | (242.5, 107.5)  | (242.5, 107.5)
  7   | (175.0, 107.5)  | (175.0, 107.5)
  8   | (107.5, 107.5)  | (107.5, 107.5)
  9   | (40.0, 107.5)   | (40.0, 107.5)
  10  | (40.0, 175.0)   | (40.0, 175.0)
  11  | (107.5, 175.0)  | (107.5, 175.0)
  12  | (175.0, 175.0)  | (175.0, 175.0)
  13  | (242.5, 175.0)  | (242.5, 175.0)
  14  | (310.0, 175.0)  | (310.0, 175.0)
  15  | (310.0, 242.5)  | (310.0, 242.5)
  16  | (242.5, 242.5)  | (242.5, 242.5)
  17  | (175.0, 242.5)  | (175.0, 242.5)
  18  | (107.5, 242.5)  | (107.5, 242.5)
  19  | (40.0, 242.5)   | (40.0, 242.5)
  20  | (40.0, 310.0)   | (40.0, 310.0)
  21  | (107.5, 310.0)  | (107.5, 310.0)
  22  | (175.0, 310.0)  | (175.0, 310.0)
  23  | (242.5, 310.0)  | (242.5, 310.0)
  24  | (310.0, 310.0)  | (310.0, 310.0)
bed_mesh: zero_reference_position is (175.00, 175.00)
Starting heater checks for heater_bed
Starting heater checks for extruder
Stats 603.4: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=3052 bytes_read=6386 bytes_retransmit=9 bytes_invalid=0 send_seq=260 receive_seq=260 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=3152 freq=63999875 SB2240: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1499 bytes_read=4679 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64005151 adj=64003312  M8P: temp=0.0 CM4: temp=30.7 SB2240: temp=0.0 heater_bed: target=0 temp=0.0 pwm=0.000 sysload=0.17 cputime=2.719 memavail=3460700 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 548562968192
webhooks: registering remote method 'reboot_machine' for connection id: 548562968192
webhooks: registering remote method 'pause_job_queue' for connection id: 548562968192
webhooks: registering remote method 'start_job_queue' for connection id: 548562968192
Stats 604.4: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=6588 bytes_read=6785 bytes_retransmit=9 bytes_invalid=0 send_seq=324 receive_seq=324 retransmit_seq=2 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999980 SB2240: mcu_awake=0.017 mcu_task_avg=0.000024 mcu_task_stddev=0.000042 bytes_write=1505 bytes_read=4768 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000982 adj=64005871  M8P: temp=28.3 CM4: temp=29.7 SB2240: temp=25.5 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.17 cputime=2.753 memavail=3459204 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 605.4: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=7081 bytes_read=6951 bytes_retransmit=9 bytes_invalid=0 send_seq=336 receive_seq=336 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999955 SB2240: mcu_awake=0.017 mcu_task_avg=0.000024 mcu_task_stddev=0.000042 bytes_write=1511 bytes_read=4900 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000273 adj=63999473  M8P: temp=28.6 CM4: temp=30.7 SB2240: temp=25.6 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.17 cputime=2.787 memavail=3458488 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 606.4: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000049 mcu_task_stddev=0.000124 bytes_write=7501 bytes_read=7140 bytes_retransmit=9 bytes_invalid=0 send_seq=345 receive_seq=345 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000022 SB2240: mcu_awake=0.017 mcu_task_avg=0.000024 mcu_task_stddev=0.000042 bytes_write=1517 bytes_read=5003 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000099 adj=63998698  M8P: temp=28.7 CM4: temp=29.7 SB2240: temp=25.5 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.16 cputime=2.806 memavail=3456976 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 607.4: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000049 mcu_task_stddev=0.000124 bytes_write=7507 bytes_read=7243 bytes_retransmit=9 bytes_invalid=0 send_seq=346 receive_seq=346 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000127 SB2240: mcu_awake=0.017 mcu_task_avg=0.000024 mcu_task_stddev=0.000042 bytes_write=1523 bytes_read=5106 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999489 adj=63998622  M8P: temp=28.7 CM4: temp=30.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.16 cputime=2.828 memavail=3456984 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 608.4: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000049 mcu_task_stddev=0.000124 bytes_write=7513 bytes_read=7346 bytes_retransmit=9 bytes_invalid=0 send_seq=347 receive_seq=347 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000154 SB2240: mcu_awake=0.017 mcu_task_avg=0.000024 mcu_task_stddev=0.000042 bytes_write=1529 bytes_read=5238 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999541 adj=63997402  M8P: temp=28.7 CM4: temp=29.2 SB2240: temp=25.6 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.16 cputime=2.863 memavail=3456996 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 609.4: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000049 mcu_task_stddev=0.000124 bytes_write=7519 bytes_read=7478 bytes_retransmit=9 bytes_invalid=0 send_seq=348 receive_seq=348 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000174 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1535 bytes_read=5355 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999434 adj=63997948  M8P: temp=28.8 CM4: temp=30.2 SB2240: temp=25.6 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.16 cputime=2.897 memavail=3456528 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 610.4: gcodein=0  mcu: mcu_awake=0.063 mcu_task_avg=0.000049 mcu_task_stddev=0.000124 bytes_write=7525 bytes_read=7581 bytes_retransmit=9 bytes_invalid=0 send_seq=349 receive_seq=349 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000173 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1541 bytes_read=5458 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999362 adj=63997966  M8P: temp=29.1 CM4: temp=29.7 SB2240: temp=25.8 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.16 cputime=2.928 memavail=3456528 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 611.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7531 bytes_read=7698 bytes_retransmit=9 bytes_invalid=0 send_seq=350 receive_seq=350 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000184 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1547 bytes_read=5590 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999295 adj=63998085  M8P: temp=29.1 CM4: temp=28.7 SB2240: temp=25.5 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.15 cputime=2.960 memavail=3456280 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 612.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7537 bytes_read=7830 bytes_retransmit=9 bytes_invalid=0 send_seq=351 receive_seq=351 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000178 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1553 bytes_read=5693 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999266 adj=63998117  M8P: temp=29.1 CM4: temp=30.2 SB2240: temp=25.8 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.15 cputime=2.992 memavail=3456056 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 613.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7543 bytes_read=7933 bytes_retransmit=9 bytes_invalid=0 send_seq=352 receive_seq=352 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000170 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1559 bytes_read=5796 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999187 adj=63998289  M8P: temp=29.2 CM4: temp=29.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.15 cputime=3.026 memavail=3456064 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 614.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7549 bytes_read=8036 bytes_retransmit=9 bytes_invalid=0 send_seq=353 receive_seq=353 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000147 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1565 bytes_read=5942 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999116 adj=63998239  M8P: temp=28.9 CM4: temp=28.7 SB2240: temp=25.9 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.15 cputime=3.061 memavail=3456064 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 615.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7555 bytes_read=8168 bytes_retransmit=9 bytes_invalid=0 send_seq=354 receive_seq=354 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000145 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1571 bytes_read=6045 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999091 adj=63998256  M8P: temp=29.1 CM4: temp=29.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.15 cputime=3.095 memavail=3456064 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 616.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7561 bytes_read=8285 bytes_retransmit=9 bytes_invalid=0 send_seq=355 receive_seq=355 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000133 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1577 bytes_read=6148 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999075 adj=63998346  M8P: temp=29.2 CM4: temp=29.2 SB2240: temp=25.8 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.13 cputime=3.129 memavail=3456064 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 617.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7567 bytes_read=8388 bytes_retransmit=9 bytes_invalid=0 send_seq=356 receive_seq=356 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000129 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1583 bytes_read=6280 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999055 adj=63998475  M8P: temp=29.1 CM4: temp=29.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.13 cputime=3.164 memavail=3456064 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 618.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7573 bytes_read=8520 bytes_retransmit=9 bytes_invalid=0 send_seq=357 receive_seq=357 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000133 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1589 bytes_read=6383 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999022 adj=63998526  M8P: temp=29.3 CM4: temp=29.2 SB2240: temp=25.6 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.13 cputime=3.200 memavail=3456072 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 619.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7579 bytes_read=8623 bytes_retransmit=9 bytes_invalid=0 send_seq=358 receive_seq=358 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000128 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1595 bytes_read=6500 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999007 adj=63998453  M8P: temp=29.3 CM4: temp=29.7 SB2240: temp=25.8 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.13 cputime=3.235 memavail=3456072 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 620.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7585 bytes_read=8726 bytes_retransmit=9 bytes_invalid=0 send_seq=359 receive_seq=359 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000130 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1601 bytes_read=6632 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998998 adj=63998515  M8P: temp=29.2 CM4: temp=30.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.13 cputime=3.270 memavail=3456072 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 621.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7591 bytes_read=8872 bytes_retransmit=9 bytes_invalid=0 send_seq=360 receive_seq=360 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000118 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1607 bytes_read=6735 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998977 adj=63998546  M8P: temp=29.3 CM4: temp=28.2 SB2240: temp=25.9 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.20 cputime=3.304 memavail=3456072 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 622.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7597 bytes_read=8975 bytes_retransmit=9 bytes_invalid=0 send_seq=361 receive_seq=361 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000099 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1613 bytes_read=6838 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998964 adj=63998587  M8P: temp=29.2 CM4: temp=28.7 SB2240: temp=25.9 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.20 cputime=3.338 memavail=3455836 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 623.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7603 bytes_read=9078 bytes_retransmit=9 bytes_invalid=0 send_seq=362 receive_seq=362 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000088 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1619 bytes_read=6970 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998944 adj=63998685  M8P: temp=29.4 CM4: temp=29.2 SB2240: temp=25.8 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.20 cputime=3.373 memavail=3455836 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 624.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7609 bytes_read=9210 bytes_retransmit=9 bytes_invalid=0 send_seq=363 receive_seq=363 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000076 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1625 bytes_read=7087 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998934 adj=63998683  M8P: temp=29.3 CM4: temp=28.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.20 cputime=3.408 memavail=3455836 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 625.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7615 bytes_read=9313 bytes_retransmit=9 bytes_invalid=0 send_seq=364 receive_seq=364 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000075 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1631 bytes_read=7190 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998924 adj=63998748  M8P: temp=29.4 CM4: temp=29.7 SB2240: temp=25.8 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.20 cputime=3.443 memavail=3455860 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 626.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7621 bytes_read=9430 bytes_retransmit=9 bytes_invalid=0 send_seq=365 receive_seq=365 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000067 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1637 bytes_read=7322 bytes_retransmit=0 bytes_invalid=0 send_seq=167 receive_seq=167 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998915 adj=63998717  M8P: temp=29.6 CM4: temp=29.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.19 cputime=3.478 memavail=3455860 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 627.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7627 bytes_read=9562 bytes_retransmit=9 bytes_invalid=0 send_seq=366 receive_seq=366 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000058 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1643 bytes_read=7425 bytes_retransmit=0 bytes_invalid=0 send_seq=168 receive_seq=168 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998905 adj=63998745  M8P: temp=29.5 CM4: temp=28.7 SB2240: temp=25.9 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.19 cputime=3.512 memavail=3457236 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 628.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7633 bytes_read=9665 bytes_retransmit=9 bytes_invalid=0 send_seq=367 receive_seq=367 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000099 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1649 bytes_read=7528 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998886 adj=63998766  M8P: temp=29.4 CM4: temp=29.7 SB2240: temp=25.9 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.19 cputime=3.547 memavail=3457428 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 629.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7639 bytes_read=9768 bytes_retransmit=9 bytes_invalid=0 send_seq=368 receive_seq=368 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000092 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1655 bytes_read=7674 bytes_retransmit=0 bytes_invalid=0 send_seq=170 receive_seq=170 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998878 adj=63998384  M8P: temp=29.5 CM4: temp=30.2 SB2240: temp=26.1 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.19 cputime=3.582 memavail=3457428 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 630.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7645 bytes_read=9900 bytes_retransmit=9 bytes_invalid=0 send_seq=369 receive_seq=369 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000081 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1661 bytes_read=7777 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998875 adj=63998481  M8P: temp=29.6 CM4: temp=28.7 SB2240: temp=25.9 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.19 cputime=3.618 memavail=3457428 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 631.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7651 bytes_read=10017 bytes_retransmit=9 bytes_invalid=0 send_seq=370 receive_seq=370 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000073 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1667 bytes_read=7880 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998869 adj=63998613  M8P: temp=29.5 CM4: temp=29.2 SB2240: temp=25.9 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.17 cputime=3.649 memavail=3457428 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 632.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7657 bytes_read=10120 bytes_retransmit=9 bytes_invalid=0 send_seq=371 receive_seq=371 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000062 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1673 bytes_read=8012 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998870 adj=63998670  M8P: temp=29.6 CM4: temp=28.7 SB2240: temp=25.7 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.17 cputime=3.682 memavail=3457428 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 633.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7663 bytes_read=10252 bytes_retransmit=9 bytes_invalid=0 send_seq=372 receive_seq=372 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000052 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1679 bytes_read=8115 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998868 adj=63998792  M8P: temp=29.6 CM4: temp=29.2 SB2240: temp=26.0 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.17 cputime=3.714 memavail=3457440 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 634.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7669 bytes_read=10355 bytes_retransmit=9 bytes_invalid=0 send_seq=373 receive_seq=373 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000042 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1685 bytes_read=8232 bytes_retransmit=0 bytes_invalid=0 send_seq=175 receive_seq=175 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998861 adj=63998860  M8P: temp=29.7 CM4: temp=29.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.17 cputime=3.744 memavail=3457440 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 635.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7675 bytes_read=10458 bytes_retransmit=9 bytes_invalid=0 send_seq=374 receive_seq=374 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000034 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1691 bytes_read=8364 bytes_retransmit=0 bytes_invalid=0 send_seq=176 receive_seq=176 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998851 adj=63998870  M8P: temp=29.7 CM4: temp=29.2 SB2240: temp=25.9 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.17 cputime=3.778 memavail=3457440 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 636.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7681 bytes_read=10604 bytes_retransmit=9 bytes_invalid=0 send_seq=375 receive_seq=375 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000033 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1703 bytes_read=8483 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998858 adj=63998846  M8P: temp=29.7 CM4: temp=28.2 SB2240: temp=25.9 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.16 cputime=3.809 memavail=3457444 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 637.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7687 bytes_read=10707 bytes_retransmit=9 bytes_invalid=0 send_seq=376 receive_seq=376 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000026 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1709 bytes_read=8586 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998842 adj=63998907  M8P: temp=29.7 CM4: temp=29.2 SB2240: temp=26.0 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.16 cputime=3.839 memavail=3461884 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 638.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7693 bytes_read=10810 bytes_retransmit=9 bytes_invalid=0 send_seq=377 receive_seq=377 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000014 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1715 bytes_read=8718 bytes_retransmit=0 bytes_invalid=0 send_seq=180 receive_seq=180 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998825 adj=63998816  M8P: temp=29.7 CM4: temp=29.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.16 cputime=3.856 memavail=3462012 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 639.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7699 bytes_read=10942 bytes_retransmit=9 bytes_invalid=0 send_seq=378 receive_seq=378 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000003 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1721 bytes_read=8821 bytes_retransmit=0 bytes_invalid=0 send_seq=181 receive_seq=181 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998809 adj=63998767  M8P: temp=29.9 CM4: temp=29.7 SB2240: temp=26.0 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.16 cputime=3.873 memavail=3462012 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 640.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7705 bytes_read=11045 bytes_retransmit=9 bytes_invalid=0 send_seq=379 receive_seq=379 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999996 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1727 bytes_read=8938 bytes_retransmit=0 bytes_invalid=0 send_seq=182 receive_seq=182 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998803 adj=63998785  M8P: temp=29.7 CM4: temp=28.2 SB2240: temp=26.1 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.16 cputime=3.889 memavail=3462012 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 641.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7711 bytes_read=11148 bytes_retransmit=9 bytes_invalid=0 send_seq=380 receive_seq=380 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999987 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1733 bytes_read=9070 bytes_retransmit=0 bytes_invalid=0 send_seq=183 receive_seq=183 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998791 adj=63998798  M8P: temp=29.7 CM4: temp=28.7 SB2240: temp=26.0 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.14 cputime=3.906 memavail=3462012 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 642.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7717 bytes_read=11294 bytes_retransmit=9 bytes_invalid=0 send_seq=381 receive_seq=381 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999981 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1739 bytes_read=9173 bytes_retransmit=0 bytes_invalid=0 send_seq=184 receive_seq=184 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998794 adj=63998781  M8P: temp=29.8 CM4: temp=29.7 SB2240: temp=25.9 heater_bed: target=0 temp=19.4 pwm=0.000 sysload=0.14 cputime=3.924 memavail=3462160 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 643.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7723 bytes_read=11397 bytes_retransmit=9 bytes_invalid=0 send_seq=382 receive_seq=382 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999981 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1745 bytes_read=9276 bytes_retransmit=0 bytes_invalid=0 send_seq=185 receive_seq=185 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998801 adj=63998870  M8P: temp=29.8 CM4: temp=29.2 SB2240: temp=25.8 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.14 cputime=3.956 memavail=3462276 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 644.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7729 bytes_read=11500 bytes_retransmit=9 bytes_invalid=0 send_seq=383 receive_seq=383 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999979 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1751 bytes_read=9408 bytes_retransmit=0 bytes_invalid=0 send_seq=186 receive_seq=186 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998798 adj=63998912  M8P: temp=29.9 CM4: temp=30.7 SB2240: temp=26.2 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.14 cputime=3.982 memavail=3454716 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 645.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7735 bytes_read=11632 bytes_retransmit=9 bytes_invalid=0 send_seq=384 receive_seq=384 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999975 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1757 bytes_read=9525 bytes_retransmit=0 bytes_invalid=0 send_seq=187 receive_seq=187 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998792 adj=63998877  M8P: temp=29.6 CM4: temp=30.7 SB2240: temp=25.9 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.14 cputime=4.008 memavail=3452284 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 646.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7741 bytes_read=11735 bytes_retransmit=9 bytes_invalid=0 send_seq=385 receive_seq=385 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999971 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1763 bytes_read=9628 bytes_retransmit=0 bytes_invalid=0 send_seq=188 receive_seq=188 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998784 adj=63998849  M8P: temp=29.9 CM4: temp=30.7 SB2240: temp=25.9 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.21 cputime=4.029 memavail=3444476 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 647.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7747 bytes_read=11852 bytes_retransmit=9 bytes_invalid=0 send_seq=386 receive_seq=386 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999968 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1769 bytes_read=9760 bytes_retransmit=0 bytes_invalid=0 send_seq=189 receive_seq=189 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998780 adj=63998807  M8P: temp=29.9 CM4: temp=30.2 SB2240: temp=26.0 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.21 cputime=4.051 memavail=3455964 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 648.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7753 bytes_read=11984 bytes_retransmit=9 bytes_invalid=0 send_seq=387 receive_seq=387 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999965 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1775 bytes_read=9863 bytes_retransmit=0 bytes_invalid=0 send_seq=190 receive_seq=190 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998775 adj=63998791  M8P: temp=29.8 CM4: temp=30.7 SB2240: temp=26.0 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.21 cputime=4.072 memavail=3433312 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 649.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7759 bytes_read=12087 bytes_retransmit=9 bytes_invalid=0 send_seq=388 receive_seq=388 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999964 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1781 bytes_read=9966 bytes_retransmit=0 bytes_invalid=0 send_seq=191 receive_seq=191 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998778 adj=63998784  M8P: temp=29.8 CM4: temp=31.2 SB2240: temp=25.9 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.21 cputime=4.093 memavail=3417440 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 650.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7765 bytes_read=12190 bytes_retransmit=9 bytes_invalid=0 send_seq=389 receive_seq=389 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999964 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1787 bytes_read=10112 bytes_retransmit=0 bytes_invalid=0 send_seq=192 receive_seq=192 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998773 adj=63998828  M8P: temp=29.7 CM4: temp=30.2 SB2240: temp=25.9 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.21 cputime=4.115 memavail=3410696 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 651.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7771 bytes_read=12322 bytes_retransmit=9 bytes_invalid=0 send_seq=390 receive_seq=390 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999964 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1793 bytes_read=10215 bytes_retransmit=0 bytes_invalid=0 send_seq=193 receive_seq=193 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998768 adj=63998775  M8P: temp=29.9 CM4: temp=31.2 SB2240: temp=26.0 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.28 cputime=4.138 memavail=3399272 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 652.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7777 bytes_read=12439 bytes_retransmit=9 bytes_invalid=0 send_seq=391 receive_seq=391 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999962 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1799 bytes_read=10318 bytes_retransmit=0 bytes_invalid=0 send_seq=194 receive_seq=194 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998763 adj=63998728  M8P: temp=29.9 CM4: temp=31.6 SB2240: temp=25.9 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.28 cputime=4.162 memavail=3458396 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 653.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7783 bytes_read=12542 bytes_retransmit=9 bytes_invalid=0 send_seq=392 receive_seq=392 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999958 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1805 bytes_read=10450 bytes_retransmit=0 bytes_invalid=0 send_seq=195 receive_seq=195 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998757 adj=63998728  M8P: temp=29.9 CM4: temp=31.6 SB2240: temp=26.0 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.28 cputime=4.182 memavail=3457612 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 654.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7789 bytes_read=12674 bytes_retransmit=9 bytes_invalid=0 send_seq=393 receive_seq=393 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999955 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1811 bytes_read=10553 bytes_retransmit=0 bytes_invalid=0 send_seq=196 receive_seq=196 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998756 adj=63998726  M8P: temp=29.9 CM4: temp=31.2 SB2240: temp=26.1 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.28 cputime=4.201 memavail=3465528 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 655.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7795 bytes_read=12777 bytes_retransmit=9 bytes_invalid=0 send_seq=394 receive_seq=394 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999952 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1817 bytes_read=10684 bytes_retransmit=0 bytes_invalid=0 send_seq=197 receive_seq=197 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998764 adj=63998758  M8P: temp=29.9 CM4: temp=30.2 SB2240: temp=26.1 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.28 cputime=4.220 memavail=3459040 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 656.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7801 bytes_read=12880 bytes_retransmit=9 bytes_invalid=0 send_seq=395 receive_seq=395 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999951 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1823 bytes_read=10802 bytes_retransmit=0 bytes_invalid=0 send_seq=198 receive_seq=198 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998758 adj=63998885  M8P: temp=29.7 CM4: temp=31.6 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.41 cputime=4.238 memavail=3456976 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 657.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7807 bytes_read=13020 bytes_retransmit=9 bytes_invalid=0 send_seq=396 receive_seq=396 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999952 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1829 bytes_read=10905 bytes_retransmit=0 bytes_invalid=0 send_seq=199 receive_seq=199 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998752 adj=63998812  M8P: temp=29.8 CM4: temp=31.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.41 cputime=4.257 memavail=3459832 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 658.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7813 bytes_read=13116 bytes_retransmit=9 bytes_invalid=0 send_seq=397 receive_seq=397 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999950 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1835 bytes_read=11022 bytes_retransmit=0 bytes_invalid=0 send_seq=200 receive_seq=200 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998746 adj=63998734  M8P: temp=29.7 CM4: temp=30.2 SB2240: temp=26.1 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.41 cputime=4.273 memavail=3459832 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 659.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7819 bytes_read=13212 bytes_retransmit=9 bytes_invalid=0 send_seq=398 receive_seq=398 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999946 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1841 bytes_read=11133 bytes_retransmit=0 bytes_invalid=0 send_seq=201 receive_seq=201 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998752 adj=63998724  M8P: temp=29.9 CM4: temp=30.2 SB2240: temp=26.0 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.41 cputime=4.299 memavail=3459832 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 660.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7825 bytes_read=13335 bytes_retransmit=9 bytes_invalid=0 send_seq=399 receive_seq=399 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999950 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1847 bytes_read=11243 bytes_retransmit=0 bytes_invalid=0 send_seq=202 receive_seq=202 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998752 adj=63998837  M8P: temp=29.9 CM4: temp=30.7 SB2240: temp=26.3 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.41 cputime=4.333 memavail=3459832 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 661.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7831 bytes_read=13435 bytes_retransmit=9 bytes_invalid=0 send_seq=400 receive_seq=400 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999953 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1853 bytes_read=11352 bytes_retransmit=0 bytes_invalid=0 send_seq=203 receive_seq=203 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998754 adj=63998786  M8P: temp=29.7 CM4: temp=30.7 SB2240: temp=26.0 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.38 cputime=4.366 memavail=3459836 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 662.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7843 bytes_read=13568 bytes_retransmit=9 bytes_invalid=0 send_seq=402 receive_seq=402 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999956 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1859 bytes_read=11462 bytes_retransmit=0 bytes_invalid=0 send_seq=204 receive_seq=204 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998754 adj=63998790  M8P: temp=30.0 CM4: temp=29.7 SB2240: temp=26.1 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.38 cputime=4.401 memavail=3460280 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 663.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7849 bytes_read=13700 bytes_retransmit=9 bytes_invalid=0 send_seq=403 receive_seq=403 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999957 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1865 bytes_read=11562 bytes_retransmit=0 bytes_invalid=0 send_seq=205 receive_seq=205 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998760 adj=63998756  M8P: temp=29.9 CM4: temp=28.7 SB2240: temp=26.1 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.38 cputime=4.434 memavail=3460340 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 664.4: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7855 bytes_read=13803 bytes_retransmit=9 bytes_invalid=0 send_seq=404 receive_seq=404 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999958 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1871 bytes_read=11679 bytes_retransmit=0 bytes_invalid=0 send_seq=206 receive_seq=206 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998760 adj=63998821  M8P: temp=30.0 CM4: temp=28.7 SB2240: temp=26.1 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.38 cputime=4.467 memavail=3460340 print_time=13.919 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
webhooks client 548562968192: Disconnected
webhooks client 548562966896: New connection
webhooks client 548562966896: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
webhooks: registering remote method 'shutdown_machine' for connection id: 548562966896
webhooks: registering remote method 'reboot_machine' for connection id: 548562966896
webhooks: registering remote method 'pause_job_queue' for connection id: 548562966896
webhooks: registering remote method 'start_job_queue' for connection id: 548562966896
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-99-g5e3daa6f-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Fri Jan 26 23:07:54 2024 (1706310474.1 727.1)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[adxl345]
cs_pin = SB2240: PB12
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[bed_mesh]
speed = 300
horizontal_move_z = 1
mesh_min = 40, 40
mesh_max = 310,310
zero_reference_position = 175,175
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[fan]
pin = SB2240: PA1
kick_start_time = 0.5
off_below = 0.09

[heater_fan hotend_fan]
pin = SB2240: PA0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0E001A000D504B4633373520-if00
restart_method = command

[mcu SB2240]
canbus_uuid = 1d98beae65e3

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 400
horizontal_move_z = 5
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[safe_z_home]
home_xy_position = 175,175
speed = 150
z_hop = 10

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 128
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = ^PF3
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC10
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 128
rotation_distance = 40
endstop_pin = ^PF4
full_steps_per_rotation = 200
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PF13
interpolate = True
run_current = 0.8
stealthchop_threshold = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256
endstop_pin = probe:z_virtual_endstop
position_max = 340
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3

[tmc2209 stepper_z]
uart_pin = PF9
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PC9
dir_pin = !PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z1]
uart_pin = PD0
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z2]
step_pin = PA10
dir_pin = PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z2]
uart_pin = PF8
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[stepper_z3]
step_pin = PD12
dir_pin = !PD11
enable_pin = !PD14
rotation_distance = 40
gear_ratio = 80:16
microsteps = 256

[tmc2209 stepper_z3]
uart_pin = PD13
interpolate = true
run_current = 0.6
stealthchop_threshold = 999999

[temperature_sensor M8P]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[temperature_sensor CM4]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor SB2240]
sensor_type = temperature_mcu
sensor_mcu = SB2240
min_temp = 0
max_temp = 100

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/klipper-backup/script.sh
timeout = 90.0
verbose = True

[gcode_macro DUMP_VARIABLES]
gcode = 
	{% set filter_name = params.NAME|default('')|string|lower %}
	{% set filter_value = params.VALUE|default('')|string|lower %}
	{% set show_cfg = params.SHOW_CFG|default(0)|int %}
	
	{% set out = [] %}
	
	{% for key1 in printer %}
	{% for key2 in printer[key1] %}
	{% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
	{% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
	{% endif %}
	{% else %}
	{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
	{% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{action_respond_info(out|join("\n"))}

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28

[gcode_macro GET_VARIABLE]
gcode = 
	{% set names = (params.NAME).split('.')|list %}
	{% set join = (params.JOIN)|default(1)|int %}
	
	{% set _dummy0 = namespace( break = 0 ) %}
	{% set _dummy1 = namespace( out = printer[names|first] ) %}
	
	{% for name in names if _dummy0.break == 0 %}
	{% if loop.index > 1 %}
	{% if name in _dummy1.out %}
	{% set _dummy1.out = _dummy1.out[name] %}
	{% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
	{% set _dummy1.out = _dummy1.out[name|int] %}
	{% else %}
	{% set _dummy0.break = loop.index0 %}
	{% endif %}
	{% endif %}
	{% endfor %}
	
	{% if _dummy1.out is boolean %}
	{ action_respond_info('Type: boolean') }
	{% elif _dummy1.out is float %}
	{ action_respond_info('Type: float') }
	{% elif _dummy1.out is integer %}
	{ action_respond_info('Type: integer') }
	{% elif _dummy1.out is mapping %}
	{ action_respond_info('Type: mapping') }
	{% elif _dummy1.out is string %}
	{ action_respond_info('Type: string') }
	{% elif _dummy1.out is iterable %}
	{ action_respond_info('Type: iterable') }
	{% elif _dummy1.out is none %}
	{ action_respond_info('Type: none') }
	{% elif _dummy1.out is undefined %}
	{ action_respond_info('Type: undefined') }
	{% elif _dummy1.out is callable %}
	{ action_respond_info('Type: callable') }
	{% else %}
	{ action_respond_info('Type: unknown') }
	{% endif %}
	
	{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
	{ action_respond_info('%s' % _dummy1.out|join("\n")) }
	{% else %}
	{ action_respond_info('%s' % _dummy1.out) }
	{% endif %}
	
	{% if _dummy0.break != 0 %}
	{ action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
	{% endif %}

[neopixel sb_leds]
pin = SB2240:PD3
chain_count = 3
color_order = GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "1"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "2,3"
gcode = 

[gcode_macro _set_sb_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set idx = (params.IDX|string).split(',') %}
	{% set transmit_last = params.TRANSMIT|default(1) %}
	
	{% for led_index in idx %}
	{% set transmit=transmit_last if loop.last else 0 %}
	set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
	{% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode = 
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
	{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set white = params.WHITE|default(0)|float %}
	{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
	{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
	{% set transmit=params.TRANSMIT|default(1) %}
	
	_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode = 
	{% set transmit=params.TRANSMIT|default(1) %}
	_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode = 
	set_logo_leds_off transmit=0
	set_nozzle_leds_off

[gcode_macro status_ready]
gcode = 
	_set_sb_leds_by_name leds="logo" color="standby" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode = 
	_set_sb_leds_by_name leds="logo" color="busy" transmit=0
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	_set_sb_leds_by_name leds="logo" color="heating" transmit=0
	_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode = 
	_set_sb_leds_by_name leds="logo" color="leveling" transmit=0
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="homing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="meshing" transmit=0
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	_set_sb_leds_by_name leds="logo" color="printing" transmit=0
	set_nozzle_leds_on

[gcode_macro NOZZLE_CLEAN]
variable_start_x = 175
variable_start_y = 347
variable_start_z = 9.68
variable_wipe_dist_y = 3
variable_wipe_qty = 5
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	{% set WIPE_TEMP = 200 %}
	{% set MIN_TEMP = 170 %}
	
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G1 X{start_x - 30} Y{start_y} F6000
	
	{% if ACTUAL_TEMP < WIPE_TEMP %}
	M104 S{ WIPE_TEMP }
	G4 2500
	{% endif %}
	
	G90
	G1 Z{start_z} F1500
	G91
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	G1 X60 F6000
	G1 X-60 F6000
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	G91
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X-2 Y-{wipe_dist_y} F{wipe_spd * 300}
	
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y-{wipe_dist_y} F{wipe_spd * 300}
	G1 X2 Y{wipe_dist_y} F{wipe_spd * 300}
	
	{% endfor %}
	
	G90
	G1 X{start_x - 60} Y{start_y} F6000
	G1 YY{start_y} F6000

[gcode_macro OFF]
gcode = 
	M84
	TURN_OFF_HEATERS
	M107

[gcode_macro PARKFRONT]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F12000
	RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKREAR]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKREAR
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F12000
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	SAVE_GCODE_STATE NAME=PARKBED
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F12000
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0  X175 Y350 F3600
	BED_MESH_CLEAR

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	
	STATUS_HOMING
	M109 S150
	M190 S{target_bed}
	G28
	G90
	
	NOZZLE_CLEAN
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	
	
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 5min"
	G4 P300000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	STATUS_LEVELING
	quad_gantry_level
	G28 Z
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	STATUS_MESHING
	BED_MESH_CALIBRATE
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	STATUS_HEATING
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="printing..."
	STATUS_PRINTING
	NOZZLE_CLEAN
	LINE_PURGE

[gcode_macro SHUTDOWN]
gcode = 
	
	OFF
	{action_respond_info('action:poweroff')}
	{action_call_remote_method("shutdown_machine")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | max %}
	{% set y_min = [ y_min - purge_margin , y_min ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[exclude_object]

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[idle_timeout]
timeout = 1800

[extruder]
step_pin = SB2240: PD0
dir_pin = SB2240: PD1
enable_pin = !SB2240: PD2
rotation_distance = 21.6357193494
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = SB2240: PB13
sensor_type = EPCOS 100K B57560G104F
sensor_pin = SB2240: PA3
min_temp = 0
max_temp = 280
min_extrude_temp = 190
control = pid
pid_kp = 31.337
pid_ki = 3.798
pid_kd = 64.635

[tmc2240 extruder]
cs_pin = SB2240: PA15
spi_software_sclk_pin = SB2240: PB10
spi_software_mosi_pin = SB2240: PB11
spi_software_miso_pin = SB2240: PB2
driver_tpfd = 0
run_current = 0.4
stealthchop_threshold = 0

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 57.515
pid_ki = 2.719
pid_kd = 304.113

[probe]
activate_gcode = 
	{% set PROBE_TEMP = 150 %}
	{% set MAX_TEMP = PROBE_TEMP + 5 %}
	{% set ACTUAL_TEMP = printer.extruder.temperature %}
	{% set TARGET_TEMP = printer.extruder.target %}
	
	{% if TARGET_TEMP > PROBE_TEMP %}
	{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
	M109 S{ PROBE_TEMP }
	{% else %}
	
	{% if ACTUAL_TEMP > MAX_TEMP %}
	{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
	{% endif %}
	{% endif %}
pin = !SB2240: PC13
x_offset = 0
y_offset = 0
speed = 20
samples = 3
samples_result = median
sample_retract_dist = 1.0
samples_tolerance = 0.006
samples_tolerance_retries = 20
lift_speed = 200
z_offset = -0.875

[bed_mesh default]
version = 1
points = 
	-0.007547, -0.008172, -0.023328
	-0.003016, 0.006672, -0.006766
	0.002922, -0.011297, 0.000266
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 148.04
max_x = 202.1
min_y = 107.62
max_y = 193.22
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 547791891712: New connection
webhooks client 547791891712: Client info {'program': 'Moonraker', 'version': 'v0.8.0-286-gf44fc4b'}
mcu 'mcu': got {'oid': 22, 'next_clock': 281745408, 'value': 7563, '#name': 'analog_in_state', '#sent_time': 729.02494988, '#receive_time': 729.049269565}
mcu 'mcu': got {'oid': 23, 'next_clock': 282385408, 'value': 31571, '#name': 'analog_in_state', '#sent_time': 729.02494988, '#receive_time': 729.059274602}
mcu 'mcu': got {'oid': 22, 'next_clock': 300945408, 'value': 7566, '#name': 'analog_in_state', '#sent_time': 729.330887639, '#receive_time': 729.349278861}
mcu 'mcu': got {'oid': 23, 'next_clock': 301585408, 'value': 31574, '#name': 'analog_in_state', '#sent_time': 729.330887639, '#receive_time': 729.359297528}
Loaded MCU 'mcu' 106 commands (v0.12.0-98-g5e433fff / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'mcu': got {'oid': 22, 'next_clock': 320145408, 'value': 7571, '#name': 'analog_in_state', '#sent_time': 729.381633065, '#receive_time': 729.649341917}
mcu 'mcu': got {'oid': 23, 'next_clock': 320785408, 'value': 31567, '#name': 'analog_in_state', '#sent_time': 729.381633065, '#receive_time': 729.659357287}
mcu 'SB2240': Starting CAN connect
Created a socket
mcu 'SB2240': got {'oid': 9, 'next_clock': 188793540, 'value': 7483, '#name': 'analog_in_state', '#sent_time': 729.811544305, '#receive_time': 729.821725676}
mcu 'SB2240': got {'oid': 10, 'next_clock': 189433540, 'value': 31491, '#name': 'analog_in_state', '#sent_time': 729.811544305, '#receive_time': 729.831720676}
mcu 'mcu': got {'oid': 22, 'next_clock': 339345408, 'value': 7568, '#name': 'analog_in_state', '#sent_time': 729.667729805, '#receive_time': 729.949284157}
mcu 'mcu': got {'oid': 23, 'next_clock': 339985408, 'value': 31567, '#name': 'analog_in_state', '#sent_time': 729.667729805, '#receive_time': 729.959303379}
mcu 'SB2240': got {'oid': 9, 'next_clock': 207993540, 'value': 7489, '#name': 'analog_in_state', '#sent_time': 730.118185768, '#receive_time': 730.1217279900001}
mcu 'SB2240': got {'oid': 10, 'next_clock': 208633540, 'value': 31486, '#name': 'analog_in_state', '#sent_time': 730.118185768, '#receive_time': 730.131735009}
Loaded MCU 'SB2240' 108 commands (v0.12.0-98-g5e433fff / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'SB2240' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu_temperature 'mcu' nominal base=-270.578035 slope=1301.878613
mcu_temperature 'SB2240' nominal base=-268.567335 slope=1290.687679
Configured MCU 'mcu' (1024 moves)
Configured MCU 'SB2240' (1024 moves)
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (40.0, 40.0)    | (40.0, 40.0)
  1   | (107.5, 40.0)   | (107.5, 40.0)
  2   | (175.0, 40.0)   | (175.0, 40.0)
  3   | (242.5, 40.0)   | (242.5, 40.0)
  4   | (310.0, 40.0)   | (310.0, 40.0)
  5   | (310.0, 107.5)  | (310.0, 107.5)
  6   | (242.5, 107.5)  | (242.5, 107.5)
  7   | (175.0, 107.5)  | (175.0, 107.5)
  8   | (107.5, 107.5)  | (107.5, 107.5)
  9   | (40.0, 107.5)   | (40.0, 107.5)
  10  | (40.0, 175.0)   | (40.0, 175.0)
  11  | (107.5, 175.0)  | (107.5, 175.0)
  12  | (175.0, 175.0)  | (175.0, 175.0)
  13  | (242.5, 175.0)  | (242.5, 175.0)
  14  | (310.0, 175.0)  | (310.0, 175.0)
  15  | (310.0, 242.5)  | (310.0, 242.5)
  16  | (242.5, 242.5)  | (242.5, 242.5)
  17  | (175.0, 242.5)  | (175.0, 242.5)
  18  | (107.5, 242.5)  | (107.5, 242.5)
  19  | (40.0, 242.5)   | (40.0, 242.5)
  20  | (40.0, 310.0)   | (40.0, 310.0)
  21  | (107.5, 310.0)  | (107.5, 310.0)
  22  | (175.0, 310.0)  | (175.0, 310.0)
  23  | (242.5, 310.0)  | (242.5, 310.0)
  24  | (310.0, 310.0)  | (310.0, 310.0)
bed_mesh: zero_reference_position is (175.00, 175.00)
Starting heater checks for heater_bed
Starting heater checks for extruder
webhooks: registering remote method 'shutdown_machine' for connection id: 547791891712
webhooks: registering remote method 'reboot_machine' for connection id: 547791891712
webhooks: registering remote method 'pause_job_queue' for connection id: 547791891712
webhooks: registering remote method 'start_job_queue' for connection id: 547791891712
Stats 731.7: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=6648 bytes_read=6728 bytes_retransmit=9 bytes_invalid=0 send_seq=297 receive_seq=292 retransmit_seq=2 srtt=0.002 rttvar=0.002 rto=0.025 ready_bytes=53 upcoming_bytes=0 freq=63999840 SB2240: mcu_awake=0.018 mcu_task_avg=0.000022 mcu_task_stddev=0.000033 bytes_write=1392 bytes_read=4721 bytes_retransmit=0 bytes_invalid=0 send_seq=137 receive_seq=137 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999837 adj=64001709  M8P: temp=0.0 CM4: temp=29.7 SB2240: temp=0.0 heater_bed: target=0 temp=0.0 pwm=0.000 sysload=0.31 cputime=2.744 memavail=3462996 print_time=141.228 buffer_time=0.250 print_stall=0 extruder: target=0 temp=0.0 pwm=0.000
Stats 732.7: gcodein=0  mcu: mcu_awake=0.058 mcu_task_avg=0.000046 mcu_task_stddev=0.000119 bytes_write=7219 bytes_read=6936 bytes_retransmit=9 bytes_invalid=0 send_seq=312 receive_seq=307 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=53 upcoming_bytes=0 freq=63999882 SB2240: mcu_awake=0.018 mcu_task_avg=0.000022 mcu_task_stddev=0.000033 bytes_write=1398 bytes_read=4824 bytes_retransmit=0 bytes_invalid=0 send_seq=138 receive_seq=138 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000611 adj=63999261  M8P: temp=29.9 CM4: temp=29.7 SB2240: temp=26.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.31 cputime=2.776 memavail=3462528 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 733.7: gcodein=0  mcu: mcu_awake=0.058 mcu_task_avg=0.000046 mcu_task_stddev=0.000119 bytes_write=7283 bytes_read=7069 bytes_retransmit=9 bytes_invalid=0 send_seq=314 receive_seq=314 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999974 SB2240: mcu_awake=0.018 mcu_task_avg=0.000022 mcu_task_stddev=0.000033 bytes_write=1404 bytes_read=4956 bytes_retransmit=0 bytes_invalid=0 send_seq=139 receive_seq=139 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999750 adj=64000636  M8P: temp=30.1 CM4: temp=30.2 SB2240: temp=26.3 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.31 cputime=2.793 memavail=3462528 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 734.7: gcodein=0  mcu: mcu_awake=0.058 mcu_task_avg=0.000046 mcu_task_stddev=0.000119 bytes_write=7289 bytes_read=7201 bytes_retransmit=9 bytes_invalid=0 send_seq=315 receive_seq=315 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000025 SB2240: mcu_awake=0.018 mcu_task_avg=0.000022 mcu_task_stddev=0.000033 bytes_write=1410 bytes_read=5059 bytes_retransmit=0 bytes_invalid=0 send_seq=140 receive_seq=140 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999335 adj=63998789  M8P: temp=30.1 CM4: temp=29.2 SB2240: temp=26.1 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.31 cputime=2.809 memavail=3462528 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 735.7: gcodein=0  mcu: mcu_awake=0.058 mcu_task_avg=0.000046 mcu_task_stddev=0.000119 bytes_write=7295 bytes_read=7304 bytes_retransmit=9 bytes_invalid=0 send_seq=316 receive_seq=316 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000107 SB2240: mcu_awake=0.018 mcu_task_avg=0.000022 mcu_task_stddev=0.000033 bytes_write=1416 bytes_read=5162 bytes_retransmit=0 bytes_invalid=0 send_seq=141 receive_seq=141 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999312 adj=63998007  M8P: temp=30.1 CM4: temp=29.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.29 cputime=2.838 memavail=3462528 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 736.7: gcodein=0  mcu: mcu_awake=0.058 mcu_task_avg=0.000046 mcu_task_stddev=0.000119 bytes_write=7301 bytes_read=7407 bytes_retransmit=9 bytes_invalid=0 send_seq=317 receive_seq=317 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000167 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1422 bytes_read=5308 bytes_retransmit=0 bytes_invalid=0 send_seq=142 receive_seq=142 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999323 adj=63998064  M8P: temp=29.9 CM4: temp=29.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.29 cputime=2.867 memavail=3462528 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 737.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000035 mcu_task_stddev=0.000099 bytes_write=7307 bytes_read=7554 bytes_retransmit=9 bytes_invalid=0 send_seq=318 receive_seq=318 retransmit_seq=2 srtt=0.001 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000164 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1428 bytes_read=5411 bytes_retransmit=0 bytes_invalid=0 send_seq=143 receive_seq=143 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999303 adj=63998208  M8P: temp=30.2 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.29 cputime=2.903 memavail=3462528 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 738.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000035 mcu_task_stddev=0.000099 bytes_write=7313 bytes_read=7657 bytes_retransmit=9 bytes_invalid=0 send_seq=319 receive_seq=319 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000148 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1434 bytes_read=5514 bytes_retransmit=0 bytes_invalid=0 send_seq=144 receive_seq=144 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999381 adj=63998397  M8P: temp=30.0 CM4: temp=29.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.29 cputime=2.938 memavail=3462528 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 739.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000035 mcu_task_stddev=0.000099 bytes_write=7319 bytes_read=7760 bytes_retransmit=9 bytes_invalid=0 send_seq=320 receive_seq=320 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000119 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1440 bytes_read=5646 bytes_retransmit=0 bytes_invalid=0 send_seq=145 receive_seq=145 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999290 adj=63998881  M8P: temp=30.2 CM4: temp=29.2 SB2240: temp=26.3 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.29 cputime=2.973 memavail=3462276 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 740.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000035 mcu_task_stddev=0.000099 bytes_write=7325 bytes_read=7892 bytes_retransmit=9 bytes_invalid=0 send_seq=321 receive_seq=321 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000120 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1446 bytes_read=5749 bytes_retransmit=0 bytes_invalid=0 send_seq=146 receive_seq=146 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999209 adj=63998767  M8P: temp=30.2 CM4: temp=29.2 SB2240: temp=26.4 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.26 cputime=3.008 memavail=3462292 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 741.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000035 mcu_task_stddev=0.000099 bytes_write=7331 bytes_read=7995 bytes_retransmit=9 bytes_invalid=0 send_seq=322 receive_seq=322 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000120 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1452 bytes_read=5866 bytes_retransmit=0 bytes_invalid=0 send_seq=147 receive_seq=147 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999136 adj=63998574  M8P: temp=30.1 CM4: temp=28.2 SB2240: temp=26.1 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.26 cputime=3.043 memavail=3462292 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 742.7: gcodein=0  mcu: mcu_awake=0.006 mcu_task_avg=0.000035 mcu_task_stddev=0.000099 bytes_write=7337 bytes_read=8098 bytes_retransmit=9 bytes_invalid=0 send_seq=323 receive_seq=323 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000128 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1458 bytes_read=5998 bytes_retransmit=0 bytes_invalid=0 send_seq=148 receive_seq=148 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999095 adj=63998428  M8P: temp=30.1 CM4: temp=29.2 SB2240: temp=26.4 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.26 cputime=3.083 memavail=3462292 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 743.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7343 bytes_read=8244 bytes_retransmit=9 bytes_invalid=0 send_seq=324 receive_seq=324 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000099 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1464 bytes_read=6101 bytes_retransmit=0 bytes_invalid=0 send_seq=149 receive_seq=149 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999068 adj=63998379  M8P: temp=30.0 CM4: temp=27.7 SB2240: temp=26.4 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.26 cputime=3.119 memavail=3462292 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 744.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7349 bytes_read=8347 bytes_retransmit=9 bytes_invalid=0 send_seq=325 receive_seq=325 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000085 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1470 bytes_read=6218 bytes_retransmit=0 bytes_invalid=0 send_seq=150 receive_seq=150 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999035 adj=63998542  M8P: temp=30.3 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.26 cputime=3.154 memavail=3462292 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 745.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7355 bytes_read=8450 bytes_retransmit=9 bytes_invalid=0 send_seq=326 receive_seq=326 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000075 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1476 bytes_read=6336 bytes_retransmit=0 bytes_invalid=0 send_seq=151 receive_seq=151 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999007 adj=63998559  M8P: temp=30.0 CM4: temp=29.2 SB2240: temp=26.2 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.24 cputime=3.188 memavail=3462292 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 746.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7361 bytes_read=8582 bytes_retransmit=9 bytes_invalid=0 send_seq=327 receive_seq=327 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000071 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1482 bytes_read=6453 bytes_retransmit=0 bytes_invalid=0 send_seq=152 receive_seq=152 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998991 adj=63998582  M8P: temp=30.1 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.24 cputime=3.224 memavail=3462296 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 747.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7367 bytes_read=8685 bytes_retransmit=9 bytes_invalid=0 send_seq=328 receive_seq=328 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000059 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1488 bytes_read=6585 bytes_retransmit=0 bytes_invalid=0 send_seq=153 receive_seq=153 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999051 adj=63998608  M8P: temp=30.1 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.24 cputime=3.259 memavail=3462296 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 748.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7373 bytes_read=8802 bytes_retransmit=9 bytes_invalid=0 send_seq=329 receive_seq=329 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000050 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1494 bytes_read=6688 bytes_retransmit=0 bytes_invalid=0 send_seq=154 receive_seq=154 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999029 adj=63999051  M8P: temp=30.2 CM4: temp=29.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.24 cputime=3.295 memavail=3462296 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 749.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7379 bytes_read=8934 bytes_retransmit=9 bytes_invalid=0 send_seq=330 receive_seq=330 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000040 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1500 bytes_read=6791 bytes_retransmit=0 bytes_invalid=0 send_seq=155 receive_seq=155 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998991 adj=63998970  M8P: temp=30.4 CM4: temp=29.2 SB2240: temp=26.3 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.24 cputime=3.323 memavail=3462044 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 750.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7385 bytes_read=9037 bytes_retransmit=9 bytes_invalid=0 send_seq=331 receive_seq=331 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000027 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1506 bytes_read=6923 bytes_retransmit=0 bytes_invalid=0 send_seq=156 receive_seq=156 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999001 adj=63998817  M8P: temp=30.3 CM4: temp=28.7 SB2240: temp=26.1 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.22 cputime=3.357 memavail=3462064 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 751.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7391 bytes_read=9140 bytes_retransmit=9 bytes_invalid=0 send_seq=332 receive_seq=332 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000025 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1512 bytes_read=7040 bytes_retransmit=0 bytes_invalid=0 send_seq=157 receive_seq=157 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998986 adj=63998987  M8P: temp=30.0 CM4: temp=28.7 SB2240: temp=26.4 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.22 cputime=3.390 memavail=3462064 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 752.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7397 bytes_read=9272 bytes_retransmit=9 bytes_invalid=0 send_seq=333 receive_seq=333 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000018 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1518 bytes_read=7143 bytes_retransmit=0 bytes_invalid=0 send_seq=158 receive_seq=158 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998979 adj=63998909  M8P: temp=30.0 CM4: temp=28.2 SB2240: temp=26.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.22 cputime=3.423 memavail=3462064 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 753.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7403 bytes_read=9389 bytes_retransmit=9 bytes_invalid=0 send_seq=334 receive_seq=334 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000010 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1524 bytes_read=7275 bytes_retransmit=0 bytes_invalid=0 send_seq=159 receive_seq=159 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998950 adj=63998924  M8P: temp=30.3 CM4: temp=29.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.22 cputime=3.456 memavail=3462064 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 754.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7409 bytes_read=9492 bytes_retransmit=9 bytes_invalid=0 send_seq=335 receive_seq=335 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000005 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1530 bytes_read=7378 bytes_retransmit=0 bytes_invalid=0 send_seq=160 receive_seq=160 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998939 adj=63998803  M8P: temp=30.1 CM4: temp=27.7 SB2240: temp=26.4 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.22 cputime=3.489 memavail=3462064 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 755.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7415 bytes_read=9624 bytes_retransmit=9 bytes_invalid=0 send_seq=336 receive_seq=336 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000009 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1536 bytes_read=7481 bytes_retransmit=0 bytes_invalid=0 send_seq=161 receive_seq=161 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998922 adj=63998795  M8P: temp=30.1 CM4: temp=28.2 SB2240: temp=26.4 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.20 cputime=3.523 memavail=3462064 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 756.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7421 bytes_read=9727 bytes_retransmit=9 bytes_invalid=0 send_seq=337 receive_seq=337 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000002 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1542 bytes_read=7627 bytes_retransmit=0 bytes_invalid=0 send_seq=162 receive_seq=162 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998896 adj=63998698  M8P: temp=30.1 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.20 cputime=3.558 memavail=3462064 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 757.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7427 bytes_read=9830 bytes_retransmit=9 bytes_invalid=0 send_seq=338 receive_seq=338 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=64000000 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1548 bytes_read=7730 bytes_retransmit=0 bytes_invalid=0 send_seq=163 receive_seq=163 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998892 adj=63998623  M8P: temp=30.2 CM4: temp=28.7 SB2240: temp=26.0 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.20 cputime=3.591 memavail=3462072 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 758.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7433 bytes_read=9976 bytes_retransmit=9 bytes_invalid=0 send_seq=339 receive_seq=339 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999993 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1554 bytes_read=7833 bytes_retransmit=0 bytes_invalid=0 send_seq=164 receive_seq=164 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998873 adj=63998679  M8P: temp=30.0 CM4: temp=28.2 SB2240: temp=26.1 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.20 cputime=3.624 memavail=3462072 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 759.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7439 bytes_read=10079 bytes_retransmit=9 bytes_invalid=0 send_seq=340 receive_seq=340 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999989 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1560 bytes_read=7965 bytes_retransmit=0 bytes_invalid=0 send_seq=165 receive_seq=165 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998861 adj=63998639  M8P: temp=30.1 CM4: temp=28.7 SB2240: temp=26.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.20 cputime=3.659 memavail=3462072 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 760.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7445 bytes_read=10182 bytes_retransmit=9 bytes_invalid=0 send_seq=341 receive_seq=341 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999982 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1566 bytes_read=8068 bytes_retransmit=0 bytes_invalid=0 send_seq=166 receive_seq=166 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998851 adj=63998641  M8P: temp=30.0 CM4: temp=28.7 SB2240: temp=26.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.19 cputime=3.691 memavail=3462072 print_time=141.228 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 761.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7465 bytes_read=10344 bytes_retransmit=9 bytes_invalid=0 send_seq=344 receive_seq=344 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999975 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1585 bytes_read=8216 bytes_retransmit=0 bytes_invalid=0 send_seq=169 receive_seq=169 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=2 freq=63998836 adj=63998685  M8P: temp=30.0 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.19 cputime=3.734 memavail=3462080 print_time=171.136 buffer_time=0.120 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
probe: open
Stats 762.7: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=7885 bytes_read=10487 bytes_retransmit=9 bytes_invalid=0 send_seq=353 receive_seq=353 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999975 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1598 bytes_read=8363 bytes_retransmit=0 bytes_invalid=0 send_seq=171 receive_seq=171 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998843 adj=63998671  M8P: temp=30.3 CM4: temp=29.2 SB2240: temp=26.4 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.19 cputime=3.779 memavail=3462080 print_time=171.136 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 763.7: gcodein=0  mcu: mcu_awake=0.010 mcu_task_avg=0.000050 mcu_task_stddev=0.000128 bytes_write=8305 bytes_read=10645 bytes_retransmit=9 bytes_invalid=0 send_seq=362 receive_seq=362 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999972 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1604 bytes_read=8466 bytes_retransmit=0 bytes_invalid=0 send_seq=172 receive_seq=172 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998834 adj=63998768  M8P: temp=30.2 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.19 cputime=3.821 memavail=3462080 print_time=171.136 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 764.7: gcodein=0  mcu: mcu_awake=0.010 mcu_task_avg=0.000050 mcu_task_stddev=0.000128 bytes_write=8311 bytes_read=10777 bytes_retransmit=9 bytes_invalid=0 send_seq=363 receive_seq=363 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999965 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1610 bytes_read=8569 bytes_retransmit=0 bytes_invalid=0 send_seq=173 receive_seq=173 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998814 adj=63998747  M8P: temp=30.4 CM4: temp=29.2 SB2240: temp=26.4 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.19 cputime=3.850 memavail=3464540 print_time=171.136 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
TMC 'stepper_z' reports GSTAT:      00000001 reset=1(Reset)
TMC 'stepper_z1' reports GSTAT:      00000001 reset=1(Reset)
TMC 'stepper_z2' reports GSTAT:      00000001 reset=1(Reset)
TMC 'stepper_z3' reports GSTAT:      00000001 reset=1(Reset)
TMC 'stepper_z' reports GSTAT:      00000000
TMC 'stepper_z1' reports GSTAT:      00000000
TMC 'stepper_z2' reports GSTAT:      00000000
TMC 'stepper_z3' reports GSTAT:      00000000
Stats 765.7: gcodein=0  mcu: mcu_awake=0.010 mcu_task_avg=0.000050 mcu_task_stddev=0.000128 bytes_write=14132 bytes_read=12827 bytes_retransmit=9 bytes_invalid=0 send_seq=523 receive_seq=523 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999952 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1616 bytes_read=8701 bytes_retransmit=0 bytes_invalid=0 send_seq=174 receive_seq=174 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998797 adj=63998673  M8P: temp=30.2 CM4: temp=28.7 SB2240: temp=26.1 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.17 cputime=3.980 memavail=3464144 print_time=175.311 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
TMC 'stepper_x' reports GSTAT:      00000001 reset=1(Reset)
TMC 'stepper_y' reports GSTAT:      00000001 reset=1(Reset)
TMC 'stepper_x' reports GSTAT:      00000000
TMC 'stepper_y' reports GSTAT:      00000000
Stats 766.7: gcodein=0  mcu: mcu_awake=0.010 mcu_task_avg=0.000050 mcu_task_stddev=0.000128 bytes_write=15596 bytes_read=14175 bytes_retransmit=9 bytes_invalid=0 send_seq=601 receive_seq=601 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999950 SB2240: mcu_awake=0.003 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1622 bytes_read=8818 bytes_retransmit=0 bytes_invalid=0 send_seq=175 receive_seq=175 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998781 adj=63998701  M8P: temp=30.5 CM4: temp=28.7 SB2240: temp=26.4 heater_bed: target=0 temp=19.6 pwm=0.000 sysload=0.17 cputime=4.066 memavail=3464156 print_time=176.211 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 767.7: gcodein=0  mcu: mcu_awake=0.010 mcu_task_avg=0.000050 mcu_task_stddev=0.000128 bytes_write=16281 bytes_read=14905 bytes_retransmit=9 bytes_invalid=0 send_seq=642 receive_seq=642 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999947 SB2240: mcu_awake=0.003 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1628 bytes_read=8921 bytes_retransmit=0 bytes_invalid=0 send_seq=176 receive_seq=176 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998781 adj=63998613  M8P: temp=30.7 CM4: temp=29.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.17 cputime=4.119 memavail=3464156 print_time=177.211 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 768.7: gcodein=0  mcu: mcu_awake=0.052 mcu_task_avg=0.000036 mcu_task_stddev=0.000048 bytes_write=17398 bytes_read=15767 bytes_retransmit=9 bytes_invalid=0 send_seq=694 receive_seq=694 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=15 upcoming_bytes=0 freq=63999944 SB2240: mcu_awake=0.003 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1634 bytes_read=9053 bytes_retransmit=0 bytes_invalid=0 send_seq=177 receive_seq=177 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998768 adj=63998697  M8P: temp=30.9 CM4: temp=29.2 SB2240: temp=26.4 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.17 cputime=4.178 memavail=3463908 print_time=178.359 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 769.7: gcodein=0  mcu: mcu_awake=0.052 mcu_task_avg=0.000036 mcu_task_stddev=0.000048 bytes_write=18541 bytes_read=16490 bytes_retransmit=9 bytes_invalid=0 send_seq=741 receive_seq=741 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999940 SB2240: mcu_awake=0.003 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1640 bytes_read=9156 bytes_retransmit=0 bytes_invalid=0 send_seq=178 receive_seq=178 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998766 adj=63998641  M8P: temp=31.2 CM4: temp=29.2 SB2240: temp=26.4 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.17 cputime=4.268 memavail=3463404 print_time=179.212 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 770.7: gcodein=0  mcu: mcu_awake=0.052 mcu_task_avg=0.000036 mcu_task_stddev=0.000048 bytes_write=19248 bytes_read=17249 bytes_retransmit=9 bytes_invalid=0 send_seq=785 receive_seq=785 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999941 SB2240: mcu_awake=0.003 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1646 bytes_read=9259 bytes_retransmit=0 bytes_invalid=0 send_seq=179 receive_seq=179 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998760 adj=63998710  M8P: temp=31.2 CM4: temp=29.7 SB2240: temp=26.4 heater_bed: target=0 temp=19.6 pwm=0.000 sysload=0.16 cputime=4.373 memavail=3463404 print_time=180.212 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 771.7: gcodein=0  mcu: mcu_awake=0.052 mcu_task_avg=0.000036 mcu_task_stddev=0.000048 bytes_write=19953 bytes_read=17970 bytes_retransmit=9 bytes_invalid=0 send_seq=830 receive_seq=830 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999943 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1652 bytes_read=9405 bytes_retransmit=0 bytes_invalid=0 send_seq=180 receive_seq=180 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998766 adj=63998667  M8P: temp=31.1 CM4: temp=29.7 SB2240: temp=26.3 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.16 cputime=4.477 memavail=3463404 print_time=181.212 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 772.7: gcodein=0  mcu: mcu_awake=0.052 mcu_task_avg=0.000036 mcu_task_stddev=0.000048 bytes_write=20653 bytes_read=18686 bytes_retransmit=9 bytes_invalid=0 send_seq=874 receive_seq=874 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999942 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1658 bytes_read=9508 bytes_retransmit=0 bytes_invalid=0 send_seq=181 receive_seq=181 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998759 adj=63998747  M8P: temp=31.2 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.16 cputime=4.580 memavail=3463404 print_time=182.212 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 773.7: gcodein=0  mcu: mcu_awake=0.038 mcu_task_avg=0.000031 mcu_task_stddev=0.000030 bytes_write=21370 bytes_read=19471 bytes_retransmit=9 bytes_invalid=0 send_seq=920 receive_seq=920 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999941 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1664 bytes_read=9611 bytes_retransmit=0 bytes_invalid=0 send_seq=182 receive_seq=182 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998751 adj=63998710  M8P: temp=31.2 CM4: temp=28.7 SB2240: temp=26.3 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.16 cputime=4.683 memavail=3463404 print_time=183.212 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 774.7: gcodein=0  mcu: mcu_awake=0.038 mcu_task_avg=0.000031 mcu_task_stddev=0.000030 bytes_write=22242 bytes_read=20197 bytes_retransmit=9 bytes_invalid=0 send_seq=966 receive_seq=966 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999945 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1670 bytes_read=9743 bytes_retransmit=0 bytes_invalid=0 send_seq=183 receive_seq=183 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998748 adj=63998676  M8P: temp=31.2 CM4: temp=28.2 SB2240: temp=26.1 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.16 cputime=4.783 memavail=3463180 print_time=184.164 buffer_time=0.139 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
No trigger on y after full movement
Pausing toolhead to calculate stepper_z phase offset
Pausing toolhead to calculate stepper_z1 phase offset
Pausing toolhead to calculate stepper_z2 phase offset
Pausing toolhead to calculate stepper_z3 phase offset
Stats 775.7: gcodein=0  mcu: mcu_awake=0.038 mcu_task_avg=0.000031 mcu_task_stddev=0.000030 bytes_write=22474 bytes_read=20575 bytes_retransmit=9 bytes_invalid=0 send_seq=982 receive_seq=982 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999955 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1676 bytes_read=9846 bytes_retransmit=0 bytes_invalid=0 send_seq=184 receive_seq=184 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998744 adj=63998647  M8P: temp=30.1 CM4: temp=28.2 SB2240: temp=26.0 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.14 cputime=4.844 memavail=3463180 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 776.7: gcodein=0  mcu: mcu_awake=0.038 mcu_task_avg=0.000031 mcu_task_stddev=0.000030 bytes_write=22991 bytes_read=20752 bytes_retransmit=9 bytes_invalid=0 send_seq=992 receive_seq=992 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999956 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1682 bytes_read=9963 bytes_retransmit=0 bytes_invalid=0 send_seq=185 receive_seq=185 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998743 adj=63998534  M8P: temp=29.9 CM4: temp=28.7 SB2240: temp=26.1 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.14 cputime=4.888 memavail=3463188 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 777.7: gcodein=0  mcu: mcu_awake=0.038 mcu_task_avg=0.000031 mcu_task_stddev=0.000030 bytes_write=22997 bytes_read=20855 bytes_retransmit=9 bytes_invalid=0 send_seq=993 receive_seq=993 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999954 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1688 bytes_read=10095 bytes_retransmit=0 bytes_invalid=0 send_seq=186 receive_seq=186 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998745 adj=63998576  M8P: temp=29.9 CM4: temp=29.2 SB2240: temp=25.9 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.14 cputime=4.921 memavail=3463188 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 778.7: gcodein=0  mcu: mcu_awake=0.021 mcu_task_avg=0.000035 mcu_task_stddev=0.000068 bytes_write=23003 bytes_read=20973 bytes_retransmit=9 bytes_invalid=0 send_seq=994 receive_seq=994 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999953 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1694 bytes_read=10198 bytes_retransmit=0 bytes_invalid=0 send_seq=187 receive_seq=187 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998747 adj=63998673  M8P: temp=29.7 CM4: temp=28.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.14 cputime=4.954 memavail=3462964 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 779.7: gcodein=0  mcu: mcu_awake=0.021 mcu_task_avg=0.000035 mcu_task_stddev=0.000068 bytes_write=23009 bytes_read=21105 bytes_retransmit=9 bytes_invalid=0 send_seq=995 receive_seq=995 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999951 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1700 bytes_read=10301 bytes_retransmit=0 bytes_invalid=0 send_seq=188 receive_seq=188 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998744 adj=63998730  M8P: temp=29.6 CM4: temp=28.2 SB2240: temp=26.2 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.14 cputime=4.989 memavail=3462460 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 780.8: gcodein=0  mcu: mcu_awake=0.021 mcu_task_avg=0.000035 mcu_task_stddev=0.000068 bytes_write=23015 bytes_read=21208 bytes_retransmit=9 bytes_invalid=0 send_seq=996 receive_seq=996 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999949 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1706 bytes_read=10433 bytes_retransmit=0 bytes_invalid=0 send_seq=189 receive_seq=189 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998741 adj=63998729  M8P: temp=29.5 CM4: temp=28.7 SB2240: temp=25.9 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.13 cputime=5.022 memavail=3462220 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 781.8: gcodein=0  mcu: mcu_awake=0.021 mcu_task_avg=0.000035 mcu_task_stddev=0.000068 bytes_write=23021 bytes_read=21325 bytes_retransmit=9 bytes_invalid=0 send_seq=997 receive_seq=997 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999949 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1712 bytes_read=10550 bytes_retransmit=0 bytes_invalid=0 send_seq=190 receive_seq=190 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998738 adj=63998739  M8P: temp=29.8 CM4: temp=28.7 SB2240: temp=25.8 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.13 cputime=5.056 memavail=3462220 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 782.8: gcodein=0  mcu: mcu_awake=0.021 mcu_task_avg=0.000035 mcu_task_stddev=0.000068 bytes_write=23027 bytes_read=21443 bytes_retransmit=9 bytes_invalid=0 send_seq=998 receive_seq=998 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999949 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1718 bytes_read=10653 bytes_retransmit=0 bytes_invalid=0 send_seq=191 receive_seq=191 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998743 adj=63998723  M8P: temp=29.5 CM4: temp=29.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.13 cputime=5.090 memavail=3461748 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 783.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23033 bytes_read=21560 bytes_retransmit=9 bytes_invalid=0 send_seq=999 receive_seq=999 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999949 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1724 bytes_read=10785 bytes_retransmit=0 bytes_invalid=0 send_seq=192 receive_seq=192 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998738 adj=63998790  M8P: temp=29.5 CM4: temp=28.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.13 cputime=5.123 memavail=3461748 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 784.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23039 bytes_read=21677 bytes_retransmit=9 bytes_invalid=0 send_seq=1000 receive_seq=1000 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999948 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1730 bytes_read=10888 bytes_retransmit=0 bytes_invalid=0 send_seq=193 receive_seq=193 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998741 adj=63998744  M8P: temp=29.5 CM4: temp=28.7 SB2240: temp=26.1 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.13 cputime=5.155 memavail=3461748 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 785.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23045 bytes_read=21795 bytes_retransmit=9 bytes_invalid=0 send_seq=1001 receive_seq=1001 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999946 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1736 bytes_read=10991 bytes_retransmit=0 bytes_invalid=0 send_seq=194 receive_seq=194 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998748 adj=63998797  M8P: temp=29.3 CM4: temp=29.2 SB2240: temp=25.9 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.12 cputime=5.188 memavail=3461524 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 786.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23051 bytes_read=21898 bytes_retransmit=9 bytes_invalid=0 send_seq=1002 receive_seq=1002 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999945 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1742 bytes_read=11137 bytes_retransmit=0 bytes_invalid=0 send_seq=195 receive_seq=195 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998745 adj=63998895  M8P: temp=29.5 CM4: temp=29.2 SB2240: temp=26.0 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.12 cputime=5.222 memavail=3461524 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 787.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23057 bytes_read=22015 bytes_retransmit=9 bytes_invalid=0 send_seq=1003 receive_seq=1003 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999944 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1748 bytes_read=11240 bytes_retransmit=0 bytes_invalid=0 send_seq=196 receive_seq=196 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998742 adj=63998847  M8P: temp=29.5 CM4: temp=29.2 SB2240: temp=25.9 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.12 cputime=5.255 memavail=3461300 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 788.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23069 bytes_read=22163 bytes_retransmit=9 bytes_invalid=0 send_seq=1005 receive_seq=1005 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999945 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1754 bytes_read=11343 bytes_retransmit=0 bytes_invalid=0 send_seq=197 receive_seq=197 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998741 adj=63998809  M8P: temp=29.4 CM4: temp=28.7 SB2240: temp=26.1 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.12 cputime=5.289 memavail=3461300 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 789.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23075 bytes_read=22266 bytes_retransmit=9 bytes_invalid=0 send_seq=1006 receive_seq=1006 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999943 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1760 bytes_read=11475 bytes_retransmit=0 bytes_invalid=0 send_seq=198 receive_seq=198 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998742 adj=63998791  M8P: temp=29.7 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.12 cputime=5.325 memavail=3465052 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 790.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23081 bytes_read=22382 bytes_retransmit=9 bytes_invalid=0 send_seq=1007 receive_seq=1007 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999944 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1766 bytes_read=11578 bytes_retransmit=0 bytes_invalid=0 send_seq=199 receive_seq=199 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998757 adj=63998818  M8P: temp=29.3 CM4: temp=29.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.27 cputime=5.360 memavail=3465068 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 791.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23087 bytes_read=22492 bytes_retransmit=9 bytes_invalid=0 send_seq=1008 receive_seq=1008 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999944 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1772 bytes_read=11681 bytes_retransmit=0 bytes_invalid=0 send_seq=200 receive_seq=200 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998753 adj=63998973  M8P: temp=29.5 CM4: temp=29.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.27 cputime=5.395 memavail=3464816 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 792.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23093 bytes_read=22588 bytes_retransmit=9 bytes_invalid=0 send_seq=1009 receive_seq=1009 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999942 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1778 bytes_read=11827 bytes_retransmit=0 bytes_invalid=0 send_seq=201 receive_seq=201 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998749 adj=63998888  M8P: temp=29.3 CM4: temp=29.2 SB2240: temp=26.0 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.27 cputime=5.427 memavail=3464816 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 793.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23099 bytes_read=22711 bytes_retransmit=9 bytes_invalid=0 send_seq=1010 receive_seq=1010 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999941 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1784 bytes_read=11923 bytes_retransmit=0 bytes_invalid=0 send_seq=202 receive_seq=202 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998748 adj=63998839  M8P: temp=29.4 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.27 cputime=5.460 memavail=3464592 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 794.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23105 bytes_read=22821 bytes_retransmit=9 bytes_invalid=0 send_seq=1011 receive_seq=1011 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999941 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1790 bytes_read=12019 bytes_retransmit=0 bytes_invalid=0 send_seq=203 receive_seq=203 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998743 adj=63998831  M8P: temp=29.4 CM4: temp=28.7 SB2240: temp=26.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.27 cputime=5.492 memavail=3464592 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 795.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23111 bytes_read=22924 bytes_retransmit=9 bytes_invalid=0 send_seq=1012 receive_seq=1012 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999940 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1796 bytes_read=12142 bytes_retransmit=0 bytes_invalid=0 send_seq=204 receive_seq=204 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998740 adj=63998780  M8P: temp=29.7 CM4: temp=27.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.25 cputime=5.524 memavail=3464592 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 796.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23117 bytes_read=23041 bytes_retransmit=9 bytes_invalid=0 send_seq=1013 receive_seq=1013 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999939 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1802 bytes_read=12238 bytes_retransmit=0 bytes_invalid=0 send_seq=205 receive_seq=205 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998738 adj=63998758  M8P: temp=29.2 CM4: temp=28.7 SB2240: temp=26.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.25 cputime=5.558 memavail=3464592 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 797.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23123 bytes_read=23159 bytes_retransmit=9 bytes_invalid=0 send_seq=1014 receive_seq=1014 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999938 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1808 bytes_read=12352 bytes_retransmit=0 bytes_invalid=0 send_seq=206 receive_seq=206 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998735 adj=63998764  M8P: temp=29.3 CM4: temp=28.7 SB2240: temp=26.3 heater_bed: target=0 temp=19.6 pwm=0.000 sysload=0.25 cputime=5.591 memavail=3464592 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 798.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23129 bytes_read=23276 bytes_retransmit=9 bytes_invalid=0 send_seq=1015 receive_seq=1015 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999938 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1814 bytes_read=12484 bytes_retransmit=0 bytes_invalid=0 send_seq=207 receive_seq=207 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998738 adj=63998747  M8P: temp=29.4 CM4: temp=28.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.25 cputime=5.626 memavail=3464592 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 799.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23135 bytes_read=23408 bytes_retransmit=9 bytes_invalid=0 send_seq=1016 receive_seq=1016 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999937 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1820 bytes_read=12587 bytes_retransmit=0 bytes_invalid=0 send_seq=208 receive_seq=208 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998737 adj=63998794  M8P: temp=29.2 CM4: temp=29.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.25 cputime=5.658 memavail=3464116 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 800.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23141 bytes_read=23511 bytes_retransmit=9 bytes_invalid=0 send_seq=1017 receive_seq=1017 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999935 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1826 bytes_read=12690 bytes_retransmit=0 bytes_invalid=0 send_seq=209 receive_seq=209 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998735 adj=63998793  M8P: temp=29.4 CM4: temp=29.2 SB2240: temp=26.1 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.23 cputime=5.690 memavail=3464116 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 801.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23147 bytes_read=23614 bytes_retransmit=9 bytes_invalid=0 send_seq=1018 receive_seq=1018 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999936 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1832 bytes_read=12822 bytes_retransmit=0 bytes_invalid=0 send_seq=210 receive_seq=210 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998735 adj=63998790  M8P: temp=29.2 CM4: temp=28.7 SB2240: temp=26.4 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.23 cputime=5.722 memavail=3464148 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 802.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23153 bytes_read=23746 bytes_retransmit=9 bytes_invalid=0 send_seq=1019 receive_seq=1019 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999935 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1838 bytes_read=12939 bytes_retransmit=0 bytes_invalid=0 send_seq=211 receive_seq=211 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998733 adj=63998780  M8P: temp=29.2 CM4: temp=28.2 SB2240: temp=26.4 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.23 cputime=5.756 memavail=3463924 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 803.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23159 bytes_read=23863 bytes_retransmit=9 bytes_invalid=0 send_seq=1020 receive_seq=1020 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999934 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1844 bytes_read=13042 bytes_retransmit=0 bytes_invalid=0 send_seq=212 receive_seq=212 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998731 adj=63998778  M8P: temp=29.4 CM4: temp=29.2 SB2240: temp=26.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.23 cputime=5.789 memavail=3463924 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 804.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23165 bytes_read=23966 bytes_retransmit=9 bytes_invalid=0 send_seq=1021 receive_seq=1021 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999933 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1850 bytes_read=13174 bytes_retransmit=0 bytes_invalid=0 send_seq=213 receive_seq=213 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998730 adj=63998771  M8P: temp=29.4 CM4: temp=28.7 SB2240: temp=26.4 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.23 cputime=5.822 memavail=3463688 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 805.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23171 bytes_read=24098 bytes_retransmit=9 bytes_invalid=0 send_seq=1022 receive_seq=1022 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999932 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1856 bytes_read=13277 bytes_retransmit=0 bytes_invalid=0 send_seq=214 receive_seq=214 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998727 adj=63998768  M8P: temp=29.2 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.29 cputime=5.855 memavail=3463688 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 806.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23177 bytes_read=24201 bytes_retransmit=9 bytes_invalid=0 send_seq=1023 receive_seq=1023 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999932 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1862 bytes_read=13380 bytes_retransmit=0 bytes_invalid=0 send_seq=215 receive_seq=215 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998727 adj=63998758  M8P: temp=29.5 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.29 cputime=5.887 memavail=3463688 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 807.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23183 bytes_read=24304 bytes_retransmit=9 bytes_invalid=0 send_seq=1024 receive_seq=1024 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999932 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1868 bytes_read=13526 bytes_retransmit=0 bytes_invalid=0 send_seq=216 receive_seq=216 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998725 adj=63998767  M8P: temp=29.2 CM4: temp=28.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.29 cputime=5.920 memavail=3463688 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 808.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23189 bytes_read=24450 bytes_retransmit=9 bytes_invalid=0 send_seq=1025 receive_seq=1025 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999931 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1874 bytes_read=13629 bytes_retransmit=0 bytes_invalid=0 send_seq=217 receive_seq=217 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998724 adj=63998748  M8P: temp=29.3 CM4: temp=29.2 SB2240: temp=26.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.29 cputime=5.952 memavail=3463688 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 809.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23195 bytes_read=24553 bytes_retransmit=9 bytes_invalid=0 send_seq=1026 receive_seq=1026 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999929 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1880 bytes_read=13732 bytes_retransmit=0 bytes_invalid=0 send_seq=218 receive_seq=218 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998732 adj=63998759  M8P: temp=29.1 CM4: temp=29.2 SB2240: temp=26.4 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.29 cputime=5.983 memavail=3462932 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 810.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23201 bytes_read=24656 bytes_retransmit=9 bytes_invalid=0 send_seq=1027 receive_seq=1027 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999938 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1886 bytes_read=13864 bytes_retransmit=0 bytes_invalid=0 send_seq=219 receive_seq=219 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998729 adj=63998894  M8P: temp=29.3 CM4: temp=28.2 SB2240: temp=26.4 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.27 cputime=6.016 memavail=3462724 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 811.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23207 bytes_read=24788 bytes_retransmit=9 bytes_invalid=0 send_seq=1028 receive_seq=1028 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999937 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1892 bytes_read=13967 bytes_retransmit=0 bytes_invalid=0 send_seq=220 receive_seq=220 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998727 adj=63998713  M8P: temp=29.3 CM4: temp=28.2 SB2240: temp=26.4 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.27 cputime=6.049 memavail=3462724 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 812.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23213 bytes_read=24891 bytes_retransmit=9 bytes_invalid=0 send_seq=1029 receive_seq=1029 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999935 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1898 bytes_read=14084 bytes_retransmit=0 bytes_invalid=0 send_seq=221 receive_seq=221 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998726 adj=63998731  M8P: temp=29.3 CM4: temp=28.7 SB2240: temp=26.5 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.27 cputime=6.080 memavail=3462724 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 813.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23219 bytes_read=24994 bytes_retransmit=9 bytes_invalid=0 send_seq=1030 receive_seq=1030 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999933 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1904 bytes_read=14216 bytes_retransmit=0 bytes_invalid=0 send_seq=222 receive_seq=222 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998726 adj=63998755  M8P: temp=29.2 CM4: temp=28.7 SB2240: temp=26.5 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.27 cputime=6.112 memavail=3462500 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 814.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23225 bytes_read=25140 bytes_retransmit=9 bytes_invalid=0 send_seq=1031 receive_seq=1031 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999932 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1910 bytes_read=14319 bytes_retransmit=0 bytes_invalid=0 send_seq=223 receive_seq=223 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998731 adj=63998790  M8P: temp=29.3 CM4: temp=28.7 SB2240: temp=26.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.27 cputime=6.145 memavail=3462500 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 815.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23231 bytes_read=25243 bytes_retransmit=9 bytes_invalid=0 send_seq=1032 receive_seq=1032 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999931 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1916 bytes_read=14422 bytes_retransmit=0 bytes_invalid=0 send_seq=224 receive_seq=224 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998728 adj=63998859  M8P: temp=29.2 CM4: temp=28.2 SB2240: temp=26.5 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.25 cputime=6.177 memavail=3462500 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 816.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23237 bytes_read=25346 bytes_retransmit=9 bytes_invalid=0 send_seq=1033 receive_seq=1033 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999931 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1922 bytes_read=14554 bytes_retransmit=0 bytes_invalid=0 send_seq=225 receive_seq=225 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998726 adj=63998824  M8P: temp=29.5 CM4: temp=28.7 SB2240: temp=26.3 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.25 cputime=6.209 memavail=3462508 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 817.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23243 bytes_read=25478 bytes_retransmit=9 bytes_invalid=0 send_seq=1034 receive_seq=1034 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999931 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1928 bytes_read=14671 bytes_retransmit=0 bytes_invalid=0 send_seq=226 receive_seq=226 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998725 adj=63998785  M8P: temp=29.3 CM4: temp=28.7 SB2240: temp=26.5 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.25 cputime=6.241 memavail=3462508 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 818.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23249 bytes_read=25581 bytes_retransmit=9 bytes_invalid=0 send_seq=1035 receive_seq=1035 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999930 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1934 bytes_read=14774 bytes_retransmit=0 bytes_invalid=0 send_seq=227 receive_seq=227 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998723 adj=63998790  M8P: temp=29.2 CM4: temp=28.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.25 cputime=6.273 memavail=3462284 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 819.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23255 bytes_read=25698 bytes_retransmit=9 bytes_invalid=0 send_seq=1036 receive_seq=1036 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999930 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1940 bytes_read=14906 bytes_retransmit=0 bytes_invalid=0 send_seq=228 receive_seq=228 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998722 adj=63998770  M8P: temp=29.5 CM4: temp=28.2 SB2240: temp=26.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.25 cputime=6.305 memavail=3462284 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 820.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23261 bytes_read=25830 bytes_retransmit=9 bytes_invalid=0 send_seq=1037 receive_seq=1037 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999929 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1946 bytes_read=15009 bytes_retransmit=0 bytes_invalid=0 send_seq=229 receive_seq=229 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998721 adj=63998775  M8P: temp=29.4 CM4: temp=28.7 SB2240: temp=26.4 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.23 cputime=6.338 memavail=3462292 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 821.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23267 bytes_read=25933 bytes_retransmit=9 bytes_invalid=0 send_seq=1038 receive_seq=1038 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999929 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1952 bytes_read=15112 bytes_retransmit=0 bytes_invalid=0 send_seq=230 receive_seq=230 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998719 adj=63998755  M8P: temp=29.3 CM4: temp=28.7 SB2240: temp=26.4 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.23 cputime=6.369 memavail=3462292 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 822.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23273 bytes_read=26036 bytes_retransmit=9 bytes_invalid=0 send_seq=1039 receive_seq=1039 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999928 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1958 bytes_read=15258 bytes_retransmit=0 bytes_invalid=0 send_seq=231 receive_seq=231 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998718 adj=63998754  M8P: temp=29.3 CM4: temp=28.2 SB2240: temp=26.6 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.23 cputime=6.401 memavail=3462076 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 823.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23279 bytes_read=26168 bytes_retransmit=9 bytes_invalid=0 send_seq=1040 receive_seq=1040 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999928 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1970 bytes_read=15377 bytes_retransmit=0 bytes_invalid=0 send_seq=233 receive_seq=233 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998716 adj=63998749  M8P: temp=29.2 CM4: temp=29.7 SB2240: temp=26.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.23 cputime=6.434 memavail=3462076 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 824.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23285 bytes_read=26285 bytes_retransmit=9 bytes_invalid=0 send_seq=1041 receive_seq=1041 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999927 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1976 bytes_read=15480 bytes_retransmit=0 bytes_invalid=0 send_seq=234 receive_seq=234 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998714 adj=63998744  M8P: temp=29.3 CM4: temp=28.7 SB2240: temp=26.6 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.23 cputime=6.466 memavail=3462076 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 825.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23291 bytes_read=26388 bytes_retransmit=9 bytes_invalid=0 send_seq=1042 receive_seq=1042 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999928 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1982 bytes_read=15612 bytes_retransmit=0 bytes_invalid=0 send_seq=235 receive_seq=235 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998713 adj=63998740  M8P: temp=29.2 CM4: temp=28.2 SB2240: temp=26.5 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.21 cputime=6.500 memavail=3461852 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 826.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23297 bytes_read=26520 bytes_retransmit=9 bytes_invalid=0 send_seq=1043 receive_seq=1043 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999927 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1988 bytes_read=15715 bytes_retransmit=0 bytes_invalid=0 send_seq=236 receive_seq=236 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998713 adj=63998722  M8P: temp=29.3 CM4: temp=29.2 SB2240: temp=26.2 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.21 cputime=6.534 memavail=3461852 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 827.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23303 bytes_read=26623 bytes_retransmit=9 bytes_invalid=0 send_seq=1044 receive_seq=1044 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999927 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=1994 bytes_read=15832 bytes_retransmit=0 bytes_invalid=0 send_seq=237 receive_seq=237 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998713 adj=63998753  M8P: temp=29.3 CM4: temp=29.2 SB2240: temp=26.6 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.21 cputime=6.566 memavail=3461852 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 828.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23309 bytes_read=26726 bytes_retransmit=9 bytes_invalid=0 send_seq=1045 receive_seq=1045 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999926 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2000 bytes_read=15964 bytes_retransmit=0 bytes_invalid=0 send_seq=238 receive_seq=238 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998716 adj=63998763  M8P: temp=29.2 CM4: temp=28.7 SB2240: temp=26.6 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.21 cputime=6.599 memavail=3461860 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 829.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23315 bytes_read=26872 bytes_retransmit=9 bytes_invalid=0 send_seq=1046 receive_seq=1046 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999925 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2006 bytes_read=16067 bytes_retransmit=0 bytes_invalid=0 send_seq=239 receive_seq=239 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998715 adj=63998824  M8P: temp=29.2 CM4: temp=28.2 SB2240: temp=26.5 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.21 cputime=6.632 memavail=3461376 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 830.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23321 bytes_read=26975 bytes_retransmit=9 bytes_invalid=0 send_seq=1047 receive_seq=1047 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999925 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2012 bytes_read=16170 bytes_retransmit=0 bytes_invalid=0 send_seq=240 receive_seq=240 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998713 adj=63998808  M8P: temp=29.5 CM4: temp=29.2 SB2240: temp=26.6 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.19 cputime=6.665 memavail=3461376 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 831.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23327 bytes_read=27078 bytes_retransmit=9 bytes_invalid=0 send_seq=1048 receive_seq=1048 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999925 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2018 bytes_read=16302 bytes_retransmit=0 bytes_invalid=0 send_seq=241 receive_seq=241 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998712 adj=63998785  M8P: temp=29.3 CM4: temp=29.7 SB2240: temp=26.7 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.19 cputime=6.697 memavail=3461152 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 832.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23333 bytes_read=27210 bytes_retransmit=9 bytes_invalid=0 send_seq=1049 receive_seq=1049 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999926 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2024 bytes_read=16419 bytes_retransmit=0 bytes_invalid=0 send_seq=242 receive_seq=242 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998711 adj=63998778  M8P: temp=29.2 CM4: temp=28.7 SB2240: temp=26.5 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.19 cputime=6.731 memavail=3461152 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 833.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23339 bytes_read=27313 bytes_retransmit=9 bytes_invalid=0 send_seq=1050 receive_seq=1050 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999925 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2030 bytes_read=16522 bytes_retransmit=0 bytes_invalid=0 send_seq=243 receive_seq=243 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998710 adj=63998744  M8P: temp=29.2 CM4: temp=29.2 SB2240: temp=26.8 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.19 cputime=6.763 memavail=3461152 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 834.8: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=23345 bytes_read=27430 bytes_retransmit=9 bytes_invalid=0 send_seq=1051 receive_seq=1051 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999927 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2036 bytes_read=16654 bytes_retransmit=0 bytes_invalid=0 send_seq=244 receive_seq=244 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998709 adj=63998739  M8P: temp=29.2 CM4: temp=29.2 SB2240: temp=26.7 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.19 cputime=6.795 memavail=3461152 print_time=184.678 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 952.9: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=29752 bytes_read=42754 bytes_retransmit=9 bytes_invalid=0 send_seq=1320 receive_seq=1320 retransmit_seq=2 srtt=0.001 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999928 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2756 bytes_read=30229 bytes_retransmit=0 bytes_invalid=0 send_seq=364 receive_seq=364 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998701 adj=63998791  M8P: temp=29.9 CM4: temp=28.7 SB2240: temp=25.7 heater_bed: target=0 temp=20.2 pwm=0.000 sysload=0.13 cputime=10.588 memavail=3460092 print_time=362.433 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.8 pwm=0.000
Stats 953.9: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=31142 bytes_read=44004 bytes_retransmit=9 bytes_invalid=0 send_seq=1396 receive_seq=1396 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999927 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2762 bytes_read=30361 bytes_retransmit=0 bytes_invalid=0 send_seq=365 receive_seq=365 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998701 adj=63998725  M8P: temp=30.5 CM4: temp=28.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.13 cputime=10.735 memavail=3460092 print_time=363.333 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 954.9: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=31852 bytes_read=44759 bytes_retransmit=9 bytes_invalid=0 send_seq=1442 receive_seq=1442 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999925 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2768 bytes_read=30478 bytes_retransmit=0 bytes_invalid=0 send_seq=366 receive_seq=366 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998700 adj=63998749  M8P: temp=30.5 CM4: temp=29.7 SB2240: temp=25.7 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.13 cputime=10.837 memavail=3459868 print_time=364.333 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 955.9: gcodein=0  mcu: mcu_awake=0.003 mcu_task_avg=0.000015 mcu_task_stddev=0.000010 bytes_write=33138 bytes_read=45645 bytes_retransmit=9 bytes_invalid=0 send_seq=1498 receive_seq=1498 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999924 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2774 bytes_read=30581 bytes_retransmit=0 bytes_invalid=0 send_seq=367 receive_seq=367 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998701 adj=63998761  M8P: temp=31.0 CM4: temp=28.7 SB2240: temp=25.7 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.12 cputime=10.946 memavail=3460128 print_time=365.342 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 956.9: gcodein=0  mcu: mcu_awake=0.061 mcu_task_avg=0.000040 mcu_task_stddev=0.000109 bytes_write=34027 bytes_read=46360 bytes_retransmit=9 bytes_invalid=0 send_seq=1544 receive_seq=1544 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999924 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2780 bytes_read=30713 bytes_retransmit=0 bytes_invalid=0 send_seq=368 receive_seq=368 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998700 adj=63998808  M8P: temp=30.7 CM4: temp=29.7 SB2240: temp=25.5 heater_bed: target=0 temp=20.2 pwm=0.000 sysload=0.12 cputime=11.048 memavail=3460128 print_time=366.342 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 957.9: gcodein=0  mcu: mcu_awake=0.061 mcu_task_avg=0.000040 mcu_task_stddev=0.000109 bytes_write=34744 bytes_read=47129 bytes_retransmit=9 bytes_invalid=0 send_seq=1590 receive_seq=1590 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999924 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2786 bytes_read=30816 bytes_retransmit=0 bytes_invalid=0 send_seq=369 receive_seq=369 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998700 adj=63998772  M8P: temp=30.8 CM4: temp=29.7 SB2240: temp=25.6 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.12 cputime=11.154 memavail=3460128 print_time=367.342 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 958.9: gcodein=0  mcu: mcu_awake=0.061 mcu_task_avg=0.000040 mcu_task_stddev=0.000109 bytes_write=35818 bytes_read=47938 bytes_retransmit=9 bytes_invalid=0 send_seq=1643 receive_seq=1643 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999926 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2792 bytes_read=30919 bytes_retransmit=0 bytes_invalid=0 send_seq=370 receive_seq=370 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998698 adj=63998768  M8P: temp=30.6 CM4: temp=28.7 SB2240: temp=25.5 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.12 cputime=11.257 memavail=3460128 print_time=368.352 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 959.9: gcodein=0  mcu: mcu_awake=0.061 mcu_task_avg=0.000040 mcu_task_stddev=0.000109 bytes_write=40675 bytes_read=48884 bytes_retransmit=9 bytes_invalid=0 send_seq=1743 receive_seq=1743 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999925 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2831 bytes_read=31065 bytes_retransmit=0 bytes_invalid=0 send_seq=371 receive_seq=371 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998697 adj=63998712  M8P: temp=31.4 CM4: temp=28.7 SB2240: temp=25.6 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.12 cputime=11.370 memavail=3458912 print_time=370.508 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 960.9: gcodein=0  mcu: mcu_awake=0.061 mcu_task_avg=0.000040 mcu_task_stddev=0.000109 bytes_write=40849 bytes_read=49292 bytes_retransmit=9 bytes_invalid=0 send_seq=1756 receive_seq=1756 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999924 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=2837 bytes_read=31168 bytes_retransmit=0 bytes_invalid=0 send_seq=372 receive_seq=372 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998695 adj=63998762  M8P: temp=31.4 CM4: temp=29.2 SB2240: temp=25.7 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.11 cputime=11.401 memavail=3458912 print_time=370.508 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 961.9: gcodein=0  mcu: mcu_awake=0.039 mcu_task_avg=0.000036 mcu_task_stddev=0.000047 bytes_write=42932 bytes_read=51431 bytes_retransmit=9 bytes_invalid=0 send_seq=1878 receive_seq=1877 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999923 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=3875 bytes_read=32919 bytes_retransmit=0 bytes_invalid=0 send_seq=459 receive_seq=459 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998691 adj=63998739  M8P: temp=31.1 CM4: temp=29.7 SB2240: temp=26.1 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.11 cputime=11.492 memavail=3458912 print_time=371.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.4 pwm=0.000
Stats 962.9: gcodein=0  mcu: mcu_awake=0.039 mcu_task_avg=0.000036 mcu_task_stddev=0.000047 bytes_write=45423 bytes_read=54452 bytes_retransmit=9 bytes_invalid=0 send_seq=2046 receive_seq=2046 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999920 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=5477 bytes_read=35578 bytes_retransmit=0 bytes_invalid=0 send_seq=593 receive_seq=593 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998691 adj=63998693  M8P: temp=31.2 CM4: temp=28.2 SB2240: temp=26.0 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.11 cputime=11.608 memavail=3458912 print_time=372.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 963.9: gcodein=0  mcu: mcu_awake=0.039 mcu_task_avg=0.000036 mcu_task_stddev=0.000047 bytes_write=47865 bytes_read=57506 bytes_retransmit=9 bytes_invalid=0 send_seq=2213 receive_seq=2213 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999917 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=7103 bytes_read=38218 bytes_retransmit=0 bytes_invalid=0 send_seq=729 receive_seq=729 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998688 adj=63998764  M8P: temp=31.0 CM4: temp=29.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.11 cputime=11.725 memavail=3458664 print_time=373.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 964.9: gcodein=0  mcu: mcu_awake=0.039 mcu_task_avg=0.000036 mcu_task_stddev=0.000047 bytes_write=50314 bytes_read=60517 bytes_retransmit=9 bytes_invalid=0 send_seq=2380 receive_seq=2380 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999915 SB2240: mcu_awake=0.051 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=8705 bytes_read=40878 bytes_retransmit=0 bytes_invalid=0 send_seq=863 receive_seq=863 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998689 adj=63998759  M8P: temp=31.1 CM4: temp=29.7 SB2240: temp=26.0 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.11 cputime=11.899 memavail=3458664 print_time=374.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 965.9: gcodein=0  mcu: mcu_awake=0.039 mcu_task_avg=0.000036 mcu_task_stddev=0.000047 bytes_write=52729 bytes_read=63522 bytes_retransmit=9 bytes_invalid=0 send_seq=2543 receive_seq=2543 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999914 SB2240: mcu_awake=0.051 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=10331 bytes_read=43542 bytes_retransmit=0 bytes_invalid=0 send_seq=999 receive_seq=998 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998687 adj=63998808  M8P: temp=31.1 CM4: temp=29.2 SB2240: temp=26.0 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.10 cputime=12.121 memavail=3458664 print_time=375.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.4 pwm=0.000
Stats 966.9: gcodein=0  mcu: mcu_awake=0.119 mcu_task_avg=0.000026 mcu_task_stddev=0.000023 bytes_write=55166 bytes_read=66573 bytes_retransmit=9 bytes_invalid=0 send_seq=2709 receive_seq=2709 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999913 SB2240: mcu_awake=0.051 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=11945 bytes_read=46182 bytes_retransmit=0 bytes_invalid=0 send_seq=1134 receive_seq=1134 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998686 adj=63998783  M8P: temp=31.2 CM4: temp=29.7 SB2240: temp=26.1 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.10 cputime=12.353 memavail=3458664 print_time=376.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.2 pwm=0.000
Stats 967.9: gcodein=0  mcu: mcu_awake=0.119 mcu_task_avg=0.000026 mcu_task_stddev=0.000023 bytes_write=57615 bytes_read=69584 bytes_retransmit=9 bytes_invalid=0 send_seq=2876 receive_seq=2876 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999912 SB2240: mcu_awake=0.051 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=13559 bytes_read=48831 bytes_retransmit=0 bytes_invalid=0 send_seq=1269 receive_seq=1269 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998684 adj=63998784  M8P: temp=31.2 CM4: temp=29.2 SB2240: temp=25.9 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.10 cputime=12.573 memavail=3458664 print_time=377.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 968.9: gcodein=0  mcu: mcu_awake=0.119 mcu_task_avg=0.000026 mcu_task_stddev=0.000023 bytes_write=60040 bytes_read=72599 bytes_retransmit=9 bytes_invalid=0 send_seq=3041 receive_seq=3041 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999911 SB2240: mcu_awake=0.051 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=15185 bytes_read=51500 bytes_retransmit=0 bytes_invalid=0 send_seq=1405 receive_seq=1405 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998681 adj=63998775  M8P: temp=31.2 CM4: temp=29.7 SB2240: temp=26.2 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.10 cputime=12.794 memavail=3458440 print_time=378.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.5 pwm=0.000
Stats 969.9: gcodein=0  mcu: mcu_awake=0.119 mcu_task_avg=0.000026 mcu_task_stddev=0.000023 bytes_write=62462 bytes_read=75619 bytes_retransmit=9 bytes_invalid=0 send_seq=3204 receive_seq=3204 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999911 SB2240: mcu_awake=0.085 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=16787 bytes_read=54160 bytes_retransmit=0 bytes_invalid=0 send_seq=1539 receive_seq=1539 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998681 adj=63998737  M8P: temp=31.2 CM4: temp=29.2 SB2240: temp=26.0 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.10 cputime=13.012 memavail=3462692 print_time=379.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.4 pwm=0.000
Stats 970.9: gcodein=0  mcu: mcu_awake=0.119 mcu_task_avg=0.000026 mcu_task_stddev=0.000023 bytes_write=64894 bytes_read=78634 bytes_retransmit=9 bytes_invalid=0 send_seq=3369 receive_seq=3369 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999910 SB2240: mcu_awake=0.085 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=18401 bytes_read=56795 bytes_retransmit=0 bytes_invalid=0 send_seq=1674 receive_seq=1674 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998681 adj=63998747  M8P: temp=31.1 CM4: temp=29.2 SB2240: temp=26.1 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.17 cputime=13.230 memavail=3462692 print_time=380.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.4 pwm=0.000
Stats 971.9: gcodein=0  mcu: mcu_awake=0.122 mcu_task_avg=0.000026 mcu_task_stddev=0.000021 bytes_write=67331 bytes_read=81656 bytes_retransmit=9 bytes_invalid=0 send_seq=3535 receive_seq=3535 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999910 SB2240: mcu_awake=0.085 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=20015 bytes_read=59473 bytes_retransmit=0 bytes_invalid=0 send_seq=1809 receive_seq=1809 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998679 adj=63998772  M8P: temp=31.3 CM4: temp=29.7 SB2240: temp=25.9 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.17 cputime=13.446 memavail=3462468 print_time=381.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 972.9: gcodein=0  mcu: mcu_awake=0.122 mcu_task_avg=0.000026 mcu_task_stddev=0.000021 bytes_write=69756 bytes_read=84700 bytes_retransmit=9 bytes_invalid=0 send_seq=3700 receive_seq=3700 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999910 SB2240: mcu_awake=0.085 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=21641 bytes_read=62108 bytes_retransmit=0 bytes_invalid=0 send_seq=1945 receive_seq=1944 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998678 adj=63998737  M8P: temp=31.4 CM4: temp=29.7 SB2240: temp=25.9 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.17 cputime=13.671 memavail=3461992 print_time=382.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.4 pwm=0.000
Stats 973.9: gcodein=0  mcu: mcu_awake=0.122 mcu_task_avg=0.000026 mcu_task_stddev=0.000021 bytes_write=72186 bytes_read=87706 bytes_retransmit=9 bytes_invalid=0 send_seq=3866 receive_seq=3866 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999909 SB2240: mcu_awake=0.085 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=23243 bytes_read=64743 bytes_retransmit=0 bytes_invalid=0 send_seq=2079 receive_seq=2079 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998677 adj=63998723  M8P: temp=31.2 CM4: temp=29.7 SB2240: temp=26.1 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.17 cputime=13.884 memavail=3461544 print_time=383.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 974.9: gcodein=0  mcu: mcu_awake=0.122 mcu_task_avg=0.000026 mcu_task_stddev=0.000021 bytes_write=74623 bytes_read=90712 bytes_retransmit=9 bytes_invalid=0 send_seq=4032 receive_seq=4032 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999909 SB2240: mcu_awake=0.085 mcu_task_avg=0.000018 mcu_task_stddev=0.000013 bytes_write=24857 bytes_read=67437 bytes_retransmit=0 bytes_invalid=0 send_seq=2214 receive_seq=2214 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998675 adj=63998731  M8P: temp=31.3 CM4: temp=29.2 SB2240: temp=26.0 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.17 cputime=14.096 memavail=3461320 print_time=384.308 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.3 pwm=0.000
Stats 975.9: gcodein=0  mcu: mcu_awake=0.122 mcu_task_avg=0.000026 mcu_task_stddev=0.000021 bytes_write=77099 bytes_read=93782 bytes_retransmit=9 bytes_invalid=0 send_seq=4200 receive_seq=4200 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999908 SB2240: mcu_awake=0.085 mcu_task_avg=0.000018 mcu_task_stddev=0.000013 bytes_write=26471 bytes_read=70072 bytes_retransmit=0 bytes_invalid=0 send_seq=2349 receive_seq=2349 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998675 adj=63998727  M8P: temp=31.2 CM4: temp=29.2 SB2240: temp=26.2 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.16 cputime=14.316 memavail=3460656 print_time=385.358 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.4 pwm=0.000
Stats 976.9: gcodein=0  mcu: mcu_awake=0.121 mcu_task_avg=0.000025 mcu_task_stddev=0.000021 bytes_write=79536 bytes_read=96804 bytes_retransmit=9 bytes_invalid=0 send_seq=4366 receive_seq=4366 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999908 SB2240: mcu_awake=0.085 mcu_task_avg=0.000018 mcu_task_stddev=0.000013 bytes_write=28085 bytes_read=72721 bytes_retransmit=0 bytes_invalid=0 send_seq=2484 receive_seq=2484 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998674 adj=63998744  M8P: temp=31.3 CM4: temp=28.7 SB2240: temp=26.0 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.16 cputime=14.541 memavail=3460040 print_time=386.358 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.4 pwm=0.000
Stats 977.9: gcodein=0  mcu: mcu_awake=0.121 mcu_task_avg=0.000025 mcu_task_stddev=0.000021 bytes_write=81401 bytes_read=98384 bytes_retransmit=9 bytes_invalid=0 send_seq=4458 receive_seq=4458 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999909 SB2240: mcu_awake=0.085 mcu_task_avg=0.000018 mcu_task_stddev=0.000013 bytes_write=28737 bytes_read=73833 bytes_retransmit=0 bytes_invalid=0 send_seq=2537 receive_seq=2537 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998678 adj=63998733  M8P: temp=30.9 CM4: temp=29.7 SB2240: temp=25.2 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=0.16 cputime=14.694 memavail=3459752 print_time=387.326 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 978.9: gcodein=0  mcu: mcu_awake=0.121 mcu_task_avg=0.000025 mcu_task_stddev=0.000021 bytes_write=83749 bytes_read=101030 bytes_retransmit=9 bytes_invalid=0 send_seq=4605 receive_seq=4605 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999910 SB2240: mcu_awake=0.085 mcu_task_avg=0.000018 mcu_task_stddev=0.000013 bytes_write=30075 bytes_read=76059 bytes_retransmit=0 bytes_invalid=0 send_seq=2649 receive_seq=2649 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998678 adj=63998786  M8P: temp=31.3 CM4: temp=29.7 SB2240: temp=25.2 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.16 cputime=14.880 memavail=3463812 print_time=388.326 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.8 pwm=0.000
Stats 979.9: gcodein=0  mcu: mcu_awake=0.121 mcu_task_avg=0.000025 mcu_task_stddev=0.000021 bytes_write=87978 bytes_read=102302 bytes_retransmit=9 bytes_invalid=0 send_seq=4711 receive_seq=4711 retransmit_seq=2 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999913 SB2240: mcu_awake=0.068 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=30370 bytes_read=76645 bytes_retransmit=0 bytes_invalid=0 send_seq=2675 receive_seq=2675 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998684 adj=63998773  M8P: temp=31.4 CM4: temp=28.2 SB2240: temp=25.2 heater_bed: target=0 temp=19.7 pwm=0.000 sysload=0.16 cputime=15.022 memavail=3462580 print_time=389.492 buffer_time=0.330 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 980.9: gcodein=0  mcu: mcu_awake=0.121 mcu_task_avg=0.000025 mcu_task_stddev=0.000021 bytes_write=88885 bytes_read=102746 bytes_retransmit=9 bytes_invalid=0 send_seq=4737 receive_seq=4737 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999914 SB2240: mcu_awake=0.068 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=30376 bytes_read=76777 bytes_retransmit=0 bytes_invalid=0 send_seq=2676 receive_seq=2676 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998686 adj=63998811  M8P: temp=31.8 CM4: temp=28.7 SB2240: temp=25.3 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.15 cputime=15.085 memavail=3462356 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 981.9: gcodein=0  mcu: mcu_awake=0.071 mcu_task_avg=0.000027 mcu_task_stddev=0.000043 bytes_write=89576 bytes_read=103220 bytes_retransmit=9 bytes_invalid=0 send_seq=4760 receive_seq=4760 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999917 SB2240: mcu_awake=0.068 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=30382 bytes_read=76880 bytes_retransmit=0 bytes_invalid=0 send_seq=2677 receive_seq=2677 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998689 adj=63998813  M8P: temp=31.8 CM4: temp=28.7 SB2240: temp=25.1 heater_bed: target=0 temp=19.8 pwm=0.000 sysload=0.15 cputime=15.156 memavail=3461908 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 982.9: gcodein=0  mcu: mcu_awake=0.071 mcu_task_avg=0.000027 mcu_task_stddev=0.000043 bytes_write=89750 bytes_read=103599 bytes_retransmit=9 bytes_invalid=0 send_seq=4773 receive_seq=4773 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999917 SB2240: mcu_awake=0.068 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=30388 bytes_read=76983 bytes_retransmit=0 bytes_invalid=0 send_seq=2678 receive_seq=2678 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998695 adj=63998818  M8P: temp=31.9 CM4: temp=29.7 SB2240: temp=25.3 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.15 cputime=15.210 memavail=3461684 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 983.9: gcodein=0  mcu: mcu_awake=0.071 mcu_task_avg=0.000027 mcu_task_stddev=0.000043 bytes_write=89924 bytes_read=103978 bytes_retransmit=9 bytes_invalid=0 send_seq=4786 receive_seq=4786 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999919 SB2240: mcu_awake=0.068 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=30394 bytes_read=77115 bytes_retransmit=0 bytes_invalid=0 send_seq=2679 receive_seq=2679 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998697 adj=63998893  M8P: temp=31.8 CM4: temp=29.2 SB2240: temp=25.3 heater_bed: target=0 temp=20.2 pwm=0.000 sysload=0.15 cputime=15.262 memavail=3461684 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 984.9: gcodein=0  mcu: mcu_awake=0.071 mcu_task_avg=0.000027 mcu_task_stddev=0.000043 bytes_write=90098 bytes_read=104386 bytes_retransmit=9 bytes_invalid=0 send_seq=4799 receive_seq=4799 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999921 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=30400 bytes_read=77232 bytes_retransmit=0 bytes_invalid=0 send_seq=2680 receive_seq=2680 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998699 adj=63998872  M8P: temp=31.9 CM4: temp=29.7 SB2240: temp=25.1 heater_bed: target=0 temp=20.2 pwm=0.000 sysload=0.15 cputime=15.319 memavail=3461684 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 985.9: gcodein=0  mcu: mcu_awake=0.071 mcu_task_avg=0.000027 mcu_task_stddev=0.000043 bytes_write=90272 bytes_read=104765 bytes_retransmit=9 bytes_invalid=0 send_seq=4812 receive_seq=4812 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999921 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=30406 bytes_read=77335 bytes_retransmit=0 bytes_invalid=0 send_seq=2681 receive_seq=2681 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998700 adj=63998846  M8P: temp=31.7 CM4: temp=28.7 SB2240: temp=25.3 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.13 cputime=15.379 memavail=3461684 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 986.9: gcodein=0  mcu: mcu_awake=0.014 mcu_task_avg=0.000025 mcu_task_stddev=0.000066 bytes_write=90446 bytes_read=105159 bytes_retransmit=9 bytes_invalid=0 send_seq=4825 receive_seq=4825 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999922 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=30412 bytes_read=77467 bytes_retransmit=0 bytes_invalid=0 send_seq=2682 receive_seq=2682 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998700 adj=63998830  M8P: temp=31.9 CM4: temp=29.2 SB2240: temp=25.2 heater_bed: target=0 temp=20.2 pwm=0.000 sysload=0.13 cputime=15.441 memavail=3461684 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 987.9: gcodein=0  mcu: mcu_awake=0.014 mcu_task_avg=0.000025 mcu_task_stddev=0.000066 bytes_write=90620 bytes_read=105567 bytes_retransmit=9 bytes_invalid=0 send_seq=4838 receive_seq=4838 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999921 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=30418 bytes_read=77570 bytes_retransmit=0 bytes_invalid=0 send_seq=2683 receive_seq=2683 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998705 adj=63998824  M8P: temp=31.9 CM4: temp=28.7 SB2240: temp=25.1 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.13 cputime=15.502 memavail=3461684 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 988.9: gcodein=0  mcu: mcu_awake=0.014 mcu_task_avg=0.000025 mcu_task_stddev=0.000066 bytes_write=90794 bytes_read=105946 bytes_retransmit=9 bytes_invalid=0 send_seq=4851 receive_seq=4851 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999921 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=30424 bytes_read=77673 bytes_retransmit=0 bytes_invalid=0 send_seq=2684 receive_seq=2684 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998706 adj=63998889  M8P: temp=32.0 CM4: temp=29.7 SB2240: temp=25.1 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.13 cputime=15.560 memavail=3461692 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.9 pwm=0.000
Stats 989.9: gcodein=0  mcu: mcu_awake=0.014 mcu_task_avg=0.000025 mcu_task_stddev=0.000066 bytes_write=90968 bytes_read=106325 bytes_retransmit=9 bytes_invalid=0 send_seq=4864 receive_seq=4864 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999921 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=30430 bytes_read=77819 bytes_retransmit=0 bytes_invalid=0 send_seq=2685 receive_seq=2685 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998711 adj=63998888  M8P: temp=32.0 CM4: temp=29.7 SB2240: temp=25.1 heater_bed: target=0 temp=20.2 pwm=0.000 sysload=0.13 cputime=15.618 memavail=3461188 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 990.9: gcodein=0  mcu: mcu_awake=0.014 mcu_task_avg=0.000025 mcu_task_stddev=0.000066 bytes_write=91142 bytes_read=106733 bytes_retransmit=9 bytes_invalid=0 send_seq=4877 receive_seq=4877 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999927 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=30436 bytes_read=77922 bytes_retransmit=0 bytes_invalid=0 send_seq=2686 receive_seq=2686 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998712 adj=63998941  M8P: temp=31.7 CM4: temp=29.2 SB2240: temp=25.2 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.12 cputime=15.677 memavail=3461028 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.9 pwm=0.000
Stats 991.9: gcodein=0  mcu: mcu_awake=0.009 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=91316 bytes_read=107127 bytes_retransmit=9 bytes_invalid=0 send_seq=4890 receive_seq=4890 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999927 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=30442 bytes_read=78025 bytes_retransmit=0 bytes_invalid=0 send_seq=2687 receive_seq=2687 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998712 adj=63998813  M8P: temp=31.9 CM4: temp=29.2 SB2240: temp=25.3 heater_bed: target=0 temp=20.2 pwm=0.000 sysload=0.12 cputime=15.738 memavail=3461372 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.7 pwm=0.000
Stats 992.9: gcodein=0  mcu: mcu_awake=0.009 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=91490 bytes_read=107499 bytes_retransmit=9 bytes_invalid=0 send_seq=4903 receive_seq=4903 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999926 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=30448 bytes_read=78157 bytes_retransmit=0 bytes_invalid=0 send_seq=2688 receive_seq=2688 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998712 adj=63998817  M8P: temp=31.9 CM4: temp=29.2 SB2240: temp=25.3 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.12 cputime=15.803 memavail=3461244 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 993.9: gcodein=0  mcu: mcu_awake=0.009 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=91664 bytes_read=107898 bytes_retransmit=9 bytes_invalid=0 send_seq=4916 receive_seq=4916 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999924 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=30454 bytes_read=78260 bytes_retransmit=0 bytes_invalid=0 send_seq=2689 receive_seq=2689 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998713 adj=63998830  M8P: temp=31.8 CM4: temp=29.7 SB2240: temp=25.1 heater_bed: target=0 temp=20.0 pwm=0.000 sysload=0.12 cputime=15.863 memavail=3464536 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.6 pwm=0.000
Stats 994.9: gcodein=0  mcu: mcu_awake=0.009 mcu_task_avg=0.000017 mcu_task_stddev=0.000013 bytes_write=91838 bytes_read=108270 bytes_retransmit=9 bytes_invalid=0 send_seq=4929 receive_seq=4929 retransmit_seq=2 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63999941 SB2240: mcu_awake=0.002 mcu_task_avg=0.000014 mcu_task_stddev=0.000011 bytes_write=30460 bytes_read=78373 bytes_retransmit=0 bytes_invalid=0 send_seq=2690 receive_seq=2690 retransmit_seq=0 srtt=0.001 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=63998714 adj=63998863  M8P: temp=31.9 CM4: temp=29.2 SB2240: temp=24.9 heater_bed: target=0 temp=19.9 pwm=0.000 sysload=0.12 cputime=15.924 memavail=3464088 print_time=389.492 buffer_time=0.000 print_stall=0 extruder: target=0 temp=21.9 pwm=0.000
